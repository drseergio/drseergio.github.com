<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sergey Pisarenko]]></title>
  <link href="http://drseergio.github.io/atom.xml" rel="self"/>
  <link href="http://drseergio.github.io/"/>
  <updated>2013-11-21T23:03:18+00:00</updated>
  <id>http://drseergio.github.io/</id>
  <author>
    <name><![CDATA[Sergey Pisarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Photo report - snowshoeing in Arosa]]></title>
    <link href="http://drseergio.github.io/blog/2013/11/21/photo-report-snowshoeing-in-arosa/"/>
    <updated>2013-11-21T22:29:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/11/21/photo-report-snowshoeing-in-arosa</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been sick in and out with all kinds of cold during past several weeks. I had a lucky break last weekend and went for a snowshoe hike in Arosa, Switzerland.</p>

<p>It has been the first time I&rsquo;ve taken the snowshoes on. I had a misconception that snowshoes will let you float on the surface. They won&rsquo;t. After a couple of hours I got a hang of it and could even run. I know I&rsquo;ll be spending time outdoors so I splurged on luxurious MSR ascent snowshoes. These snowshoes have good grip &ndash; I could not slide even if I wanted to.</p>

<p>The hike itself has been rather easy and there was not much snow. However, it has been a good opportunity to get used to the snowshoes.</p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10984441523"><img src="http://farm8.staticflickr.com/7370/10984441523_6bb5bff50f.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10984229385/"><img src="http://farm6.staticflickr.com/5541/10984229385_427cedd1fd.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10984238225/"><img src="http://farm3.staticflickr.com/2810/10984238225_4afe4a194f.jpg" width="500"></a></p>

<p>We have spent the day bathing in sun above a fog that covered most of central Switzerland. On our way back there was a 2 minute opportunity to shoot the fog and the sunset before descending back into fog&rsquo;s vast but short-lived kingdom (we were changing train to bus as the regular train route was blocked by a rockfall).</p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10984454594"><img src="http://farm3.staticflickr.com/2812/10984454594_4c62b44c3d.jpg" width="500"></a></p>

<p>And this time someone took a photo of me!</p>

<p><a href="http://drseergio.github.io/images/arosa_me_01_full.jpg"><img src="http://drseergio.github.io/images/arosa/arosa_me_01_small.jpg" width="500"></a></p>

<p><img src="http://drseergio.github.io/images/arosa/arosa_me_02_small.jpg"></p>

<h3>Links to photo albums in Flickr</h3>

<p>I&rsquo;ve split the pictures into 2 thematic albums:</p>

<ul>
<li><p><a href="http://www.flickr.com/photos/68217075@N08/sets/72157637918523355/">Color photos</a></p></li>
<li><p><a href="http://www.flickr.com/photos/68217075@N08/sets/72157637919444363/">B&amp;W photos</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photo report - climbing up via ferrata Feurenwand]]></title>
    <link href="http://drseergio.github.io/blog/2013/11/03/photo-report-climbing-up-via-ferrata-feurenwand/"/>
    <updated>2013-11-03T17:37:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/11/03/photo-report-climbing-up-via-ferrata-feurenwand</id>
    <content type="html"><![CDATA[<p>Via ferratas come in different difficulty levels. Last week I&rsquo;ve done a K2 climb. Yesterday I went to Fuerenalp along with two friends and did a K4 climb. The route is a lot more exciting. Wet and slippery stones and supports presented an additional challenge.</p>

<p>According the alpine log book there were no other climbers that day.</p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10650891073/"><img src="http://farm6.staticflickr.com/5471/10650891073_9c9d90e8e9.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10650877443/"><img src="http://farm4.staticflickr.com/3667/10650877443_b435560c6f.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10649733453/"><img src="http://farm3.staticflickr.com/2865/10649733453_0f1da9acda.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10649518066/"><img src="http://farm3.staticflickr.com/2808/10649518066_327bc5537f.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10649641416/in/set-72157637265758456"><img src="http://farm4.staticflickr.com/3718/10649641416_32d76bc92d.jpg" width="500"></a></p>

<h3>Links to photo albums in Flickr</h3>

<p>I&rsquo;ve split the pictures into 2 thematic albums:</p>

<ul>
<li><p><a href="http://www.flickr.com/photos/68217075@N08/sets/72157637268821823/">Scenic photos/landscapes</a></p></li>
<li><p><a href="http://www.flickr.com/photos/68217075@N08/sets/72157637265758456/">Climbing photos</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photo report - Halloween special]]></title>
    <link href="http://drseergio.github.io/blog/2013/10/31/photo-report-halloween-special/"/>
    <updated>2013-10-31T22:18:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/10/31/photo-report-halloween-special</id>
    <content type="html"><![CDATA[<p>I had inspiration to work on something creative today. I have decided to experiment with pseudo black back-drop shots. The idea is to setup a camera so that it picks-up light from the flash only. I have produced a video and a couple of photographs. See below!</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/MG5LqIHvHDk "></iframe></div>


<p><a href="http://www.flickr.com/photos/68217075@N08/10598689133/"><img src="http://farm4.staticflickr.com/3823/10598689133_85e0a27c11.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10598445314/"><img src="http://farm4.staticflickr.com/3723/10598445314_c1f1a3a664.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10598435805/"><img src="http://farm4.staticflickr.com/3751/10598435805_bc34c720bb.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10598445536/"><img src="http://farm4.staticflickr.com/3834/10598445536_aa6e716a1e.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10598433905/"><img src="http://farm6.staticflickr.com/5550/10598433905_4ef734f132.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10598440204/"><img src="http://farm6.staticflickr.com/5543/10598440204_27104c7173.jpg" width="500"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Investment portfolio update - October 2013]]></title>
    <link href="http://drseergio.github.io/blog/2013/10/30/investment-portfolio-update-october-2013/"/>
    <updated>2013-10-30T19:28:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/10/30/investment-portfolio-update-october-2013</id>
    <content type="html"><![CDATA[<p>Investments are a cornerstone for building passive income, increasing wealth and eventually reaching financial independence. I have passion for learning how the investment world functions and what are the different trading strategies. For the past 4 years I have mostly relied on low-cost index investments and company stock in distressed industries. In addition, I have had lots of interest towards quantitative strategies.</p>

<p>A couple of months ago I have faced a possibility of a major change in life so I have liquidated every investment into cash in preparation for it. The change never came. After reflecting upon my limited trading experience I have realized that I don&rsquo;t have a coherent strategy and I am likely to fall for the many biases and traps, namely:</p>

<ul>
<li><p>Confirmation bias. Unless I&rsquo;m doing trading (real or on paper) my brain is likely to pick-up just the positive examples of an investment strategy.</p></li>
<li><p>No single coherent idea or strategy. I have been fascinated by many tools, strategies and approaches. I have spent many hours translating ideas or systems in code that I can run to verify results. When I am chasing so many options I never arrive at anything satisfying and conclusive.</p></li>
<li><p>Not believing into one&rsquo;s own approach. Somewhat related to the previous point. Unless I&rsquo;m confident in a chosen strategy I am likely not to invest timely. This means I miss many gains and lose more often because I pull out prematurely.</p></li>
<li><p>Lack of free quality market data. Together with a friend I have written a convoluted system to buy and sell company stock around major price shocks. The system demonstrated fantastic results. However, I have realized that the price data does not include companies that went bankrupt. Such omissions make back-testing overly optimistic.</p></li>
<li><p>Lack of desire to dedicate lots of time. I won&rsquo;t last forever and I want to use the opportunity to live my life fully. There is unlimited amount of market information to understand and make use of. Onwards, I consciously choose not to spend all my spare time on investments.</p></li>
</ul>


<h3>Investment strategy of choice</h3>

<p>To overcome the concerns I have made a decision to consistently follow a strategy that I accept consciously and intellectually. The strategy is called &ldquo;Ivy Portfolio&rdquo;. There are several variations of this strategy and it boils down to holding about 5 diversified instruments when their prices are above a certain threshold. I recommend reading resources I&rsquo;ve linked to at the bottom of this post.</p>

<p>What appeals to me in this strategy is its simplicity and ability to reduce draw-downs in down markets. I will allocate 80% of my portfolio in Ivy Portfolio. The rest is going to be invested in individual companies and experimental quantitative strategies.</p>

<p>Once a month I will spend about 2-6 hours on maintaining my investment portfolio and sharing findings on this site. I will calculate and update signals for the past month, aggregate quarterly performance figures, test alternative strategies and publish results. I consciously impose a limit so that I don&rsquo;t end-up aimlessly procrastinating. I will need to set clear goals and boundaries if I want to fit in the limits.</p>

<h3>Strategy details</h3>

<p>There are several variations of the Ivy Portfolio strategy. The one that appeals to me is called &ldquo;TOP 3 GTAA 13&rdquo;. First, one needs to choose 13 instruments that represent different kinds of assets. I have made a choice of the following instruments:</p>

<ul>
<li><strong>VTV</strong> &ndash; Vanguard Value ETF (US Large Cap Value)</li>
<li><strong>MTUM</strong> &ndash; iShares MSCI USA Momentum Factor (US Large Cap Momentum)</li>
<li><strong>VBR</strong> &ndash; Vanguard Small Cap Value ETF (US Small Cap Value)</li>
<li><strong>VBK</strong> &ndash; Vanguard Small Cap Growth ETF (US Small Cap Momentum)</li>
<li><strong>VEA</strong> &ndash; Vanguard FTSE Developed Markets ETF (Foreign Developed)</li>
<li><strong>VWO</strong> &ndash; Vanguard FTSE Emerging Markets ETF (Foreign Emerging)</li>
<li><strong>VGIT</strong> &ndash; Vanguard Interm-Tm Govt Bd Idx ETF (US 10 Year Government Bonds)</li>
<li><strong>IGOV</strong> &ndash; iShares International Treasury Bond (Foreign 10 Year Government Bonds)</li>
<li><strong>VCIT</strong> &ndash; Vanguard Interm-Tm Corp Bd Idx ETF (US Corporate Bonds)</li>
<li><strong>VGLT</strong> &ndash; Vanguard Long-Term Govt Bd Idx ETF (US 30 Year Government Bonds)</li>
<li><strong>GSG</strong> &ndash; iShares S&amp;P GSCI Commodity-Indexed Trust (Commodities)</li>
<li><strong>IAU</strong> &ndash; iShares Gold Trust (Gold)</li>
<li><strong>VNQ</strong> &ndash; Vanguard REIT Index ETF (NAREIT Index)</li>
</ul>


<p>The goal is to find representative ETFs with lowest expenses and higher liquidity. On the last trading day of a month performance of each instrument is compared. 3 best performing instruments are bought. The cycle is repeated every month. Portfolio is rebalanced to maintain correct ratios.</p>

<p>It does not matter what tool you use to calculate the results. I prefer R so I have written few functions to do the calculation for me. I present the code below. I assume you have R installed along with the &ldquo;quantmod&rdquo; package. By default, quantmod relies on Yahoo! Finance as the source for price data.</p>

<figure class='code'><figcaption><span>R </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="o">&gt;</span> require<span class="p">(</span>quantmod<span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> end <span class="o">&lt;-</span> <span class="s">&#39;2013-10-30&#39;</span> <span class="c1"># specify the last trading day of the month</span>
</span><span class='line'><span class="o">&gt;</span> instruments <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&#39;VTV&#39;</span><span class="p">,</span> <span class="s">&#39;MTUM&#39;</span><span class="p">,</span> <span class="s">&#39;VBR&#39;</span><span class="p">,</span> <span class="s">&#39;VBK&#39;</span><span class="p">,</span> <span class="s">&#39;VEA&#39;</span><span class="p">,</span> <span class="s">&#39;VWO&#39;</span><span class="p">,</span> <span class="s">&#39;VGIT&#39;</span><span class="p">,</span> <span class="s">&#39;IGOV&#39;</span><span class="p">,</span> <span class="s">&#39;VCIT&#39;</span><span class="p">,</span> <span class="s">&#39;VGLT&#39;</span><span class="p">,</span> <span class="s">&#39;GSG&#39;</span><span class="p">,</span> <span class="s">&#39;IAU&#39;</span><span class="p">,</span> <span class="s">&#39;VNQ&#39;</span><span class="p">)</span> <span class="c1"># instruments we have chosen before</span>
</span><span class='line'><span class="o">&gt;</span> retFunc <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>X<span class="p">,</span> returns<span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">if</span> <span class="p">(</span>X <span class="o">&gt;</span> nrow<span class="p">(</span>returns<span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">return</span><span class="p">(</span><span class="m">-999</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="kr">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">return</span><span class="p">((</span>prod<span class="p">(</span>returns<span class="p">[</span>paste<span class="p">(</span>index<span class="p">(</span>returns<span class="p">[</span><span class="m">1</span><span class="o">+</span>nrow<span class="p">(</span>returns<span class="p">)</span><span class="o">-</span>X<span class="p">]),</span> <span class="s">&#39;::&#39;</span><span class="p">,</span> end<span class="p">,</span> sep<span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)]</span><span class="m">+1</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span><span class="p">)</span> <span class="o">*</span> <span class="m">100</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="c1"># function calculates return for a given X-month period, returns -999 if not enough data is available</span>
</span><span class='line'><span class="o">&gt;</span> getAvgRet <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>instrument<span class="p">,</span> end<span class="o">=</span>end<span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  prices <span class="o">&lt;-</span> getSymbols<span class="p">(</span>instrument<span class="p">,</span> auto.assign<span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span>
</span><span class='line'>  returns <span class="o">&lt;-</span> monthlyReturn<span class="p">(</span>Ad<span class="p">(</span>prices<span class="p">))[</span>paste<span class="p">(</span><span class="s">&#39;2001-01-01::&#39;</span><span class="p">,</span> end<span class="p">,</span> sep<span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)]</span>
</span><span class='line'>  <span class="kr">return</span><span class="p">(</span>mean<span class="p">(</span>sapply<span class="p">(</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">12</span><span class="p">),</span> FUN<span class="o">=</span>retFunc<span class="p">,</span> returns<span class="o">=</span>returns<span class="p">)))</span>
</span><span class='line'><span class="p">}</span> <span class="c1"># function calculates an average of returns for an instrument for the last 1, 3, 6, 12 months</span>
</span><span class='line'><span class="o">&gt;</span> topInstruments <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>results<span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  ndx <span class="o">&lt;-</span> order<span class="p">(</span>results<span class="p">,</span> decreasing<span class="o">=</span><span class="k-Variable">T</span><span class="p">)[</span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">]</span>
</span><span class='line'>  <span class="kr">return</span><span class="p">(</span>results<span class="p">[</span>ndx<span class="p">])</span>
</span><span class='line'><span class="p">}</span> <span class="c1"># function returns top 3 instruments</span>
</span><span class='line'><span class="o">&gt;</span> checkSMA <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>instrument<span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  prices <span class="o">&lt;-</span> Ad<span class="p">(</span>getSymbols<span class="p">(</span>instrument<span class="p">,</span> auto.assign<span class="o">=</span><span class="kc">FALSE</span><span class="p">))</span>
</span><span class='line'>  <span class="kr">return</span><span class="p">(</span>tail<span class="p">(</span>prices<span class="p">,</span> n<span class="o">=</span><span class="m">1</span><span class="p">)</span> <span class="o">&gt;</span> SMA<span class="p">(</span>prices<span class="p">,</span> n<span class="o">=</span><span class="m">200</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span> <span class="c1"># verifies if current instrument price is above 10-month SMA</span>
</span><span class='line'><span class="o">&gt;</span> results <span class="o">&lt;-</span> topInstruments<span class="p">(</span>sapply<span class="p">(</span>instruments<span class="p">,</span> FUN<span class="o">=</span>getAvgRet<span class="p">,</span> end<span class="o">=</span>end<span class="p">))</span>
</span><span class='line'><span class="o">&gt;</span> sapply<span class="p">(</span>names<span class="p">(</span>results<span class="p">),</span> FUN<span class="o">=</span>checkSMA<span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> retTable <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>instruments<span class="p">,</span> end<span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  calcRow <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>instrument<span class="p">,</span> end<span class="o">=</span>end<span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    prices <span class="o">&lt;-</span> getSymbols<span class="p">(</span>instrument<span class="p">,</span> auto.assign<span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span>
</span><span class='line'>    returns <span class="o">&lt;-</span> monthlyReturn<span class="p">(</span>Ad<span class="p">(</span>prices<span class="p">))[</span>paste<span class="p">(</span><span class="s">&#39;2001-01-01::&#39;</span><span class="p">,</span> end<span class="p">,</span> sep<span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)]</span>
</span><span class='line'>    <span class="kr">return</span><span class="p">(</span>sapply<span class="p">(</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">12</span><span class="p">),</span> FUN<span class="o">=</span>retFunc<span class="p">,</span> returns<span class="o">=</span>returns<span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  tempTable <span class="o">&lt;-</span> sapply<span class="p">(</span>instruments<span class="p">,</span> FUN<span class="o">=</span>calcRow<span class="p">,</span> end<span class="o">=</span>end<span class="p">)</span>
</span><span class='line'>  tempTable <span class="o">&lt;-</span> rbind<span class="p">(</span>tempTable<span class="p">,</span> colMeans<span class="p">(</span>tempTable<span class="p">))</span>
</span><span class='line'>  tempTable <span class="o">&lt;-</span> t<span class="p">(</span>tempTable<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  colnames<span class="p">(</span>tempTable<span class="p">)</span> <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">,</span><span class="s">&#39;3&#39;</span><span class="p">,</span><span class="s">&#39;6&#39;</span><span class="p">,</span><span class="s">&#39;12&#39;</span><span class="p">,</span><span class="s">&#39;avg&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">return</span><span class="p">(</span>tempTable<span class="p">[</span>order<span class="p">(</span>tempTable<span class="p">[,</span><span class="m">5</span><span class="p">],</span> decreasing<span class="o">=</span><span class="k-Variable">T</span><span class="p">),])</span>
</span><span class='line'><span class="p">}</span> <span class="c1"># function to print returns for all instruments</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output of the function returns names of top 3 instruments and whether they should be invested in. &ldquo;checkSMA&rdquo; will cause a failure if an instrument does not have enough past trading data.</p>

<h3>October&rsquo;s update**</h3>

<p>As of <strong>2013-10-30</strong> the best performing instruments are:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VBK      VBR      VEA
</span><span class='line'>18.03609 15.64619 13.12281</span></code></pre></td></tr></table></div></figure>


<p>We avoid investing if price is below 10 month SMA. Running through 10-month SMA check we get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VBK  VBR  VEA
</span><span class='line'>TRUE TRUE TRUE</span></code></pre></td></tr></table></div></figure>


<p>This means portfolio should be fully invested in <strong>VBK</strong>, <strong>VBR</strong>, <strong>VEA</strong>.</p>

<p>As of <strong>2013-10-30</strong> the calculated returns for each instrument are presented below(*):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>symbol        1         3          6           12          avg
</span><span class='line'>VBK   4.1411847  8.432639 19.7628856   39.8076472   18.0360891
</span><span class='line'>VBR   5.0531915  6.004696 15.3004135   36.2264693   15.6461927
</span><span class='line'>VEA   4.1182415 10.482574  9.6302208   28.2601930   13.1228073
</span><span class='line'>VTV   5.4878922  3.939009 11.2084592   29.1578947   12.4483138
</span><span class='line'>VWO   5.5569399  9.344347 -1.0742644    5.5569399    4.8459906
</span><span class='line'>VNQ   6.0326580  2.066657 -5.0886453   13.2041969    4.0537167
</span><span class='line'>IGOV  1.8086058  3.989038  0.9658027   -0.0390282    1.6811045
</span><span class='line'>GSG  -0.8956146 -1.382913  2.5567274   -1.0789149   -0.2001789
</span><span class='line'>VCIT  1.5943419  1.789575 -3.2202809   -0.9929907   -0.2073387
</span><span class='line'>VGIT  0.7220217  1.182592 -2.0155749   -0.8651321   -0.2440233
</span><span class='line'>VGLT  1.6029963  1.208775 -9.8378091   -8.9297704   -3.9889521
</span><span class='line'>IAU   1.3188518  1.555210 -8.9895470  -22.0763723   -7.0479644
</span><span class='line'>MTUM  6.4959169  5.789086 11.5257532 -999.0000000 -243.7973111</span></code></pre></td></tr></table></div></figure>


<p>* Instruments that have insufficient data are penalized with large negative returns.</p>

<p>** Ideally the analysis must be performed at the close of the last trading day of the month, however, due to personal reasons this won&rsquo;t be possible every month. This is also why I do it today, rather than on 2013-10-31.</p>

<h3>Resources</h3>

<ul>
<li><p><a href="http://www.mebanefaber.com/2013/06/14/qtaa-update-conclustions-and-faqs/">The updated paper on Ivy Portfolio by Mebane Faber</a></p></li>
<li><p><a href="http://www.amazon.com/The-Ivy-Portfolio-Endowments-Markets/dp/1118008855">&ldquo;Ivy Portfolio&rdquo; book by Mebane Faber (amazon)</a></p></li>
<li><p><a href="http://investingforaliving.wordpress.com/">Early retiree&rsquo;s blog on investments, including strong focus on Ivy Portfolio</a></p>

<ul>
<li><p><a href="http://investingforaliving.wordpress.com/2013/09/20/an-ivy-buy-hold-portfolio-for-the-skeptical-emotional-investor/">An IVY Buy &amp; Hold Portfolio for the Skeptical &amp; Emotional Investor</a></p></li>
<li><p><a href="http://investingforaliving.wordpress.com/2013/08/05/whats-up-with-the-recent-poor-performance-of-ivy/">What’s up with the recent poor performance of IVY?</a></p></li>
<li><p><a href="http://investingforaliving.wordpress.com/2013/07/26/ivy-portfolio-summary-fees-commissions-and-taxes/">IVY portfolio summary: fees, commissions, and taxes</a></p></li>
<li><p><a href="http://investingforaliving.wordpress.com/2013/07/21/ivy-portfolio-summary-returns-risk-swrs/">IVY Portfolio Summary: returns, risk, &amp; SWRs</a></p></li>
<li><p><a href="http://investingforaliving.wordpress.com/2013/07/15/ivy-timing-model-extensions-weightings-momentum/">IVY timing model extensions – weightings &amp; momentum</a></p></li>
<li><p><a href="http://investingforaliving.wordpress.com/2013/07/13/ivy-timing-model-extensions-more-asset-classes/">IVY Timing Model Extensions – more asset classes</a></p></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The photo curse]]></title>
    <link href="http://drseergio.github.io/blog/2013/10/27/the-photo-curse/"/>
    <updated>2013-10-27T19:51:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/10/27/the-photo-curse</id>
    <content type="html"><![CDATA[<p>I am fascinated with photography. A picture inspires, tells a story, expresses an author&rsquo;s view, captures a fleeting moment, gives an aesthetic pleasure. But there&rsquo;s a way to kill inspiration and make this art forever painful for oneself.</p>

<p>Ever since I&rsquo;ve purchased my own digital camera 4 years ago I&rsquo;ve been both blessed and burdened by photography. I have even purposefully abstained from taking any pictures for at least a couple of lengthy periods. Recently I had breakthroughs that have completely changed my attitude and brought the fun back!</p>

<p>At the root of most of my photography problems was an internal conflict between two seemingly contradicting ideas: &ldquo;enjoy the moment&rdquo; or &ldquo;take a photograph&rdquo;. One part of me badly wanted to take the camera out and put it on a tripod to take a shot. The other part was thoroughly disgusted at the sight of tourists pushing each other just to take an unremarkable shot of themselves. This other part of me reminded me not to become a mindless photo zombie machine. It&rsquo;s a common sight to see anxious visitors snap a landmark and then almost immediately move on to something else. I have seen the culmination at the Louvre museum in Paris where dozens of people are trying to take a picture of Mona Lisa. It&rsquo;s ridiculous. Why go to places at all if you don&rsquo;t genuinely marvel at things? That&rsquo;s why I often prefer to stop and really &ldquo;taste&rdquo; a sight.</p>

<p>Getting a sense of satisfaction from a photograph goes a long way. Realistically, nobody cares about my photos. There are just too many great and amazing photographers out there. Without full-time dedication it is not <em>likely</em> that anyone will become a true artist. I don&rsquo;t aspire to become one. I do photographs as a hobby and I seek satisfaction from my work regardless of how many people will ever see my photographs. But even with a very limited audience presentation is important. Everyone occasionally makes amazing photographs but the problem is that those pictures get mixed with the rest and lose their charm. For example, after a journey I end-up with 3 truly amazing shots and 40 good shots (lets say out of 500 total). It&rsquo;s better to separate pictures in sets and present amazing shots individually.</p>

<p>Then there is the feeling of being overwhelmed with options. There are unlimited number of things you can do to a photograph, not even counting limitless possibilities of composition and exposure. You can retouch a portrait, merge multiple photos together, apply various post processing effects and adjustments. Not surprisingly, this sea of options caused me almost an infinite hesitation. Should make a black-and-white picture? Or duo-tone? Or use crazy colors?</p>

<p>The problem with too many options goes beyond software. Hardware. I own two cameras, three lenses and an assortment of accessories (such as tripods, filters, etc). Carrying too much stuff gave me (head)ache for two reasons: hard to decide what lens/setup to use right now and the practical inconvenience of lugging too much stuff around. That&rsquo;s why now I mostly use a mirrorless camera with a fixed lens. For every occasion I now think ahead of what kind of shots I am after. Limits are good for fueling creativity.</p>

<p>The advent of digital cameras meant that nobody was bound by the limit of 36 frames anymore. The down-side is the actual upside. Instead of having 36 or so pictures one can easily end-up with thousands. It is a chore to go through all these pictures. Even worse, without a usable storage scheme/structure it is virtually impossible to navigate through one&rsquo;s own photos. I went through 3 iterations before I arrived at a system that works reasonably well. I&rsquo;ll explain it in a separate post.</p>

<p>Finally, it is the time pressure that exacerbates everything I have mentioned above. Going to an event or a trip with other people means that others expect to see pictures. Of course it&rsquo;s possible to ignore them and not touch the pictures for more than a year. I&rsquo;ve done that so many times! Obviously, postponing means that the backlog of pictures will grow to thousands (if not tens of thousands) of pictures. At some point there is a mounting pressure to get over the past photos before touching anything recent. It&rsquo;s a down-spiral from here. Why take pictures if I have not touched any from the past year?</p>

<p>The breakthrough that has helped me overcome problems is simple. I&rsquo;ve asked myself what kind of pictures I am taking and why. Depending on the answer I plan accordingly. I keep two major categories in my mind: photos for reporting and photos for pleasure.</p>

<p>The reporting pictures ideally take little to none processing and are mostly for documenting journeys and moments. Rules of good composition still apply but I would not plan on doing black-on-white shots or time-consuming post-processing effects. I keep these photographs as simple as possible. This allows me to share pictures most people care about quickly.</p>

<p>The other kind of photos is for joyous purposes. That includes interesting shooting angles, time-lapses, stitched panoramas, HDR shots and all kinds of fancy processing in software.</p>

<p>The important part is to separate photos into these categories as soon as possible. Then there is no pressure to finish everything at once. I find that having a separate backlog for artistic photos motivating. I return to individual photos and spend time experimenting without pressure. I feel a lot more creative and liberated that way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photo report - climbing up via ferrata in Pinut]]></title>
    <link href="http://drseergio.github.io/blog/2013/10/27/photo-report-climbing-up-via-ferrata-in-pinut/"/>
    <updated>2013-10-27T18:53:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/10/27/photo-report-climbing-up-via-ferrata-in-pinut</id>
    <content type="html"><![CDATA[<p>This Saturday I had a pleasure to do my first &ldquo;via ferrata&rdquo; climb in Switzerland, in Pinut to be precise. Via ferrata routes do not require climbing experience. The idea is to climb up a mountain and various obstacles while being hooked-up to a metal cable that runs along the whole route. Equipment-wise prospective climbers need a harness, a via ferrata set (a Y-shaped lanyard with an energy absorber) and a helmet.</p>

<p>The weather was phenomenally good for late October. Air temperature has risen to almost 20C! Possibly, this has been the last day of the year in Switzerland to do such a climb. I&rsquo;ll be happy to do more via ferrata climbs next year &ndash; there are hundreds of routes throughout the country.</p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10517919016/"><img src="http://farm4.staticflickr.com/3742/10517919016_c7b5b061bb.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10518125663/"><img src="http://farm3.staticflickr.com/2809/10518125663_2a9d3e6d3f.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10518192946/"><img src="http://farm8.staticflickr.com/7434/10518192946_febfdc56dc.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10518409383/"><img src="http://farm4.staticflickr.com/3684/10518409383_b93729c5e5.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10518258406/"><img src="http://farm4.staticflickr.com/3831/10518258406_c620acfb78.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10518468453/"><img src="http://farm6.staticflickr.com/5495/10518468453_588c9d71da.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10518252485/"><img src="http://farm4.staticflickr.com/3828/10518252485_c610f6590e.jpg" width="500"></a></p>

<p><a href="http://www.flickr.com/photos/68217075@N08/10518291764/"><img src="http://farm8.staticflickr.com/7391/10518291764_3daf8225d7.jpg" width="500"></a></p>

<h3>Links to photo albums in Flickr</h3>

<p>I&rsquo;ve split the pictures into 3 thematic albums:</p>

<ul>
<li><p><a href="http://www.flickr.com/photos/68217075@N08/sets/72157637014054095/">Scenic photos/landscapes</a></p></li>
<li><p><a href="http://www.flickr.com/photos/68217075@N08/sets/72157637013590136/">Climbing photos</a></p></li>
<li><p><a href="http://www.flickr.com/photos/68217075@N08/sets/72157637013702576/">B&amp;W climbing shots</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 sold gadgets later or welcome back to Microsoft Windows]]></title>
    <link href="http://drseergio.github.io/blog/2013/10/21/5-sold-gadgets-later-or-welcome-back-to-microsoft-windows/"/>
    <updated>2013-10-21T20:31:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/10/21/5-sold-gadgets-later-or-welcome-back-to-microsoft-windows</id>
    <content type="html"><![CDATA[<p>I honestly would not anticipate writing about Microsoft Windows. Not after I have irrevocably and irreversibly switched to Linux and OSX years ago when I was studying at the university.</p>

<p>But here I am, happily typing this in Sublime2 editor on my desktop computer running nothing else but Microsoft Windows 8. Yes, the same computer that had been running Gentoo Linux a week or so ago!</p>

<!-- more -->


<p>Long story short I&rsquo;ve never intended this to happen. My goal was to reduce number of gadgets. Instead of a full-size tower PC and an Apple MacMini I wanted a single powerful machine running OSX. My idea was to buy a new motherboard with Thunderbolt ports (to connect two 27&#8221; Apple displays) and install OSX on to it. It&rsquo;s not an officially supported thing to do but I could not care less. The upcoming Apple MacPro is going to cost a fortune anyway and there is absolutely no way for me to justify such a steep price.</p>

<p><a href="http://drseergio.github.io/images/win8/3.jpg"><img src="http://drseergio.github.io/images/win8/3_s.jpg" width="500"></a></p>

<p>As you probably expect things did not go according to plan. It turned out that the motherboard I have ordered includes a Thunderbolt controller (DSL4510/4410) that is not yet supported by OSX (not even the latest Mavericks version). That left any attempts to install OSX out in the cold.</p>

<p><a href="http://drseergio.github.io/images/win8/9.jpg"><img src="http://drseergio.github.io/images/win8/9_s.jpg" width="500"></a></p>

<p>The reason I had an Apple computer in the first place was to natively run software that does not exist on Linux, such as Adobe imaging products. So I&rsquo;ve decided to install Windows and use all the same software on it. After all, the hardware I had put together has &ldquo;designed for Windows 8&rdquo; written all over it.</p>

<p>I was expecting a miserable experience. People love to bash Microsoft Windows and there are reasons for that. However, I found that the desktop experience works rather well and looks good. To be honest, I don&rsquo;t see much difference between operating systems for desktop work-loads because most of the time I use a web browser. Windows 8 does not stand in my way.</p>

<p>Every system has its quirks and Windows is no exception. I am used to quirks in all of the systems I have a pleasure to work with. The things I did not like about Windows:</p>

<ul>
<li><p>Installing drivers. In OSX almost everything is built-in. In Linux you either have a distribution with a binary kernel that includes support for almost every device or, if you&rsquo;re into it, you compile your own. Neither OSX nor Linux mandate messing with device support unless you really want to.</p></li>
<li><p>Updates. The dreadful updates plague OSX as well but not as much as Windows. I don&rsquo;t fully appreciate forced reboots and long installation times.</p></li>
<li><p>Lack of virtual desktops. Even with two 27&#8221; screens I like to have an option to switch to a different work-space. Both OSX and Linux have nailed this well. I&rsquo;ve found a program that enables virtual desktop but I don&rsquo;t know if it&rsquo;s doing its work efficiently. Perhaps I shouldn&rsquo;t care because the Intel i7 4740K is very fast and there&rsquo;s 16GB of system memory available.</p></li>
<li><p>Lack of good terminal. As a work-around I&rsquo;ve installed Console2 and Cygwin. It&rsquo;s an OK solution. I also SSH into a powerful Linux server (which acts as a <a href="http://drseergio.github.io/blog/2013/09/01/htpc-build-i-slash-m-proud-of/">HTPC</a> ) and keep a bunch of VMs around.</p></li>
<li><p>Sleep puts all windows on one monitor. In addition, the time is not immediately synced so I see the time when the computer was put to sleep.</p></li>
<li><p>Smaller behavior quirks that are solved by finding and installing utilities. For example:</p>

<ul>
<li>AltDrag to drag windows with a pointer while holding Alt pressed</li>
<li>AlwaysMouseWheel to scroll windows that are not in focus</li>
<li>TypeIt to enter German characters with a QWERTY layout</li>
<li>Dexpot for virtual desktops</li>
<li>ObjectDock for a OSX-like bar</li>
<li>ClipX as a clipboard history manager</li>
<li>NO, I do not need a &ldquo;start menu&rdquo; :D</li>
</ul>
</li>
</ul>


<p>The machine is exquisite! It&rsquo;s extremely quiet &ndash; it has only a single 120mm fan on the CPU heat-sink (I removed all the other fans). There are no extension cards and everything else is cooled passively. There&rsquo;s just one SSD and no vibrating hard disks. I can&rsquo;t tell if the computer is running or not! The Apple screens are gorgeous. I&rsquo;ve added a Logitech trackpad to do the touch gestures.</p>

<p><a href="http://drseergio.github.io/images/win8/4.jpg"><img src="http://drseergio.github.io/images/win8/4_s.jpg" width="500"></a></p>

<p>While I believe OSX might eventually support the Thunderbolt controller I don&rsquo;t plan to switch. The desktop experience is great and all the software I need works well. I&rsquo;ve sold all the gadgets, computers and computer parts I wanted through a local online auction. I feel much better now!</p>

<p>Full hardware list:</p>

<ul>
<li>Antec 1200 case (with all fans either removed or disabled)</li>
<li>Asus Z87 deluxe/dual motherboard</li>
<li>Intel 4770K</li>
<li>Noctua NH-U12P SE2 cooler</li>
<li>2x8GB RAM</li>
<li>Apple Cinema Display 27&#8221;</li>
<li>Apple Thunderbolt Screen 27&#8221;</li>
<li>Advantage Kinesis keyboard</li>
<li>Logitech M570 trackball</li>
<li>Logitech T650 multi-touch trackpad</li>
<li>Seasonic 460W passively-cooled PSU</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why write at all]]></title>
    <link href="http://drseergio.github.io/blog/2013/10/21/why-write-at-all/"/>
    <updated>2013-10-21T18:39:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/10/21/why-write-at-all</id>
    <content type="html"><![CDATA[<p>A couple of weeks ago I have deactivated my Facebook account. I&rsquo;ve been intending to do that for months. Finally, I&rsquo;ve left the service for good.</p>

<p>Looking all the way back to 2006 I don&rsquo;t have much to show for it. You can&rsquo;t call me an addict because I&rsquo;ve never been hooked as much as people around me. Nevertheless, whenever I had cared to open Facebook&rsquo;s trendy blue interface I have been bombarded with meaningless status updates and viral junk. Numerous pointless apps and games just intensified the noise.</p>

<p>The noise itself never bothered me that much. What really bothered me is the dismal quality of what users share. It&rsquo;s seems to be a common problem with all social media. Most users simply don&rsquo;t share anything worth anyone else&rsquo;s attention. Instead of sharing genuine experiences, reflecting on one&rsquo;s life or authoring insightful writing I&rsquo;ve seen boasting, junk videos, cynicism, meaningless quotes and cryptic posts. Combined, these make their authors feel special and invite pointless discussions.</p>

<p>Facebook always made me feel bad about myself or my life. Other people&rsquo;s experiences seem just so much more authentic and full of life. It&rsquo;s basically like trashy advertising that shows you happy folks cleaning toilets with a certain kind of solvent. But instead of random folks you see whoever you had added to your Facebook &ldquo;friends&rdquo; and instead of cleaning toilets you see them doing whatever is that they were doing.</p>

<p>There are ways to read the &ldquo;stream&rdquo; without feeling insecure and unsatisfied. But it&rsquo;s hard mental and spiritual work. Despite spending considerable time to embrace mindful and present living I find Facebook to be a tough opponent. Facebook pierces through peace like a full metal jacket bullet. It&rsquo;s better to let go and give it up altogether.</p>

<p>Generally, I like the premise of a social network like Facebook. In theory it could be great. Imagine having a close circle of people who exert an effort to distill and publish their thoughts. Imagine a circle of friends who take the time to break down their adventures and experiences into stories. I am in total awe when a person cares to think and write down her thoughts instead of just slapping a bunch of photos in my face. Even if a story is not very coherent or deep.</p>

<p>I understand why Facebook, or any social media for that matter, is like that. It&rsquo;s easier to write and share junk. It&rsquo;s our brains wired for infinite satisfaction. A collection of juicy and emotional posts trigger our long-forgotten instincts just like an unhealthy sugary/fatty meal does. Nobody voluntarily wants to spend time writing or reading long posts when a &ldquo;Wall&rdquo; is bursting with sugar-high gossip, funny and disgusting media. One must willingly overcome animal desires and instincts. Choose a high-value diet &ndash; provoking and challenging information sources.</p>

<p>Not to seem like a hypocrite but I can&rsquo;t say I&rsquo;ve shared much in a meaningful way myself. I have not shared much at all. I intend to change with this personal home page. It&rsquo;s far from being a first blog of mine &ndash; there were many before it. For me the hardest part in keeping a personal page is finding a meaningful reason to share. It&rsquo;s all to easy to make a blog nothing else but a collection of the same crappy posts you see in social networks. The reason I think it&rsquo;s different this time is I feel no rush. I enjoy reflecting and writing down thoughts. I truly don&rsquo;t care if there is no value in these musings. I truly enjoy doing it right now.</p>

<p>Hopefully, by some serendipitous encounter you will find this site and share either thoughts or values or hobbies with me. Although even less likely, I hope we meet and do something fun together!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My lucky night with a FreeNAS failure]]></title>
    <link href="http://drseergio.github.io/blog/2013/09/08/my-lucky-night-with-freenas-failure/"/>
    <updated>2013-09-08T01:34:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/09/08/my-lucky-night-with-freenas-failure</id>
    <content type="html"><![CDATA[<p>It&rsquo;s 1:35am right now and something really bad has happened about 4 hours ago. First, Time Machine on my Mac Mini complained that the backup network disk became inaccessible. Then network shares have stopped responding on all computers. This means something wrong has happened with the wonderful reliable NAS server that I had built weeks ago.</p>

<p>First, I connect to the server via SSH and start poking around. Once I notice that file-system commands, such as <code>ls</code>, cause sessions to hang I become worrisome. I do a reboot hoping that solves the problem. 10 minutes pass. The server does not start.</p>

<!-- more -->


<p><img class="right" src="http://drseergio.github.io/images/chinese_monitor.jpg"></p>

<p>Once I&rsquo;ve connected a handy <a href="http://dx.com/p/8-tft-lcd-car-reverse-rear-view-color-monitor-w-vga-bnc-cable-black-149114">8&#8221; VGA monitor</a> I noticed SCSI driver related problems in the kernel logs. As it turns out, the USB drive on which FreeNAS had been installed has failed. This monitor is really handy for troubleshooting problems with servers &ndash; small, easy to carry and occupies little space in the toolbox. The picture quality is god-awful but good enough for reading terminal output.</p>

<p>I have been expecting the worst &ndash; that I would need to re-configure everything. After a quick search on the Internet I found out that FreeNAS keeps configuration in a SQLite database file on the 4th partition in <code>freenas-v1.db</code> file. A bleak hope ran through my mind. I&rsquo;ve connected the flash disk to a Linux computer and started poking around. All I needed to do was to compile UFS file-system support in kernel and then mount the partition with:</p>

<p><code>mount -r -t ufs -o ufstype=44bsd /dev/sdc4 /tmp/mm</code></p>

<p>I copied the file over and verified that it&rsquo;s not corrupted. YES! I had been stupidly postponing back-up of the configuration file. If I had to re-configure FreeNAS from scratch I would feel like a fool and waste a week worth of evenings. Now, I just need to burn the FreeNAS image to a replacement drive and I&rsquo;m all set.</p>

<p>The last step took embarassingly long time. None of the images that I had written either on Linux or Mac would boot. FreeNAS would get to an error saying <code>corrupt or invalid GPT detected.</code>. No matter what I did the outcome was the same. The solution was to delete GPT by running parted from Linux and doing <code>mklabel msdos</code>, followed by write of the disk image. I believe this problem occurred because I had previously used the drives for experimentation with Chromebook and some GPT headers apparently remained there.</p>

<p><img class="left" src="http://drseergio.github.io/images/msata.jpg"></p>

<p>Finally, I found a spare mSATA SSD drive lying around with no use (a leftover from a notebook upgrade). I also had a mSATA adapter so I&rsquo;ve put them together inside of the NAS to use as a boot device for FreeNAS. Now the NAS has 8 SATA devices (6 HDDs and 2 SSDs) maxing out all available SATA ports in the system.</p>

<p>Once I have successfully booted the server and got to the web UI and initiated import of the recovered configuration database file. Then the server rebooted twice and everything was back!</p>

<p>The machine is back online and running beautifully. I now have a backup of the configuration. In case anything goes wrong again reinstalling FreeNAS is really quick &amp; simple IFF the backup configuration file is available. I am once again pleasantly surprised at how well FreeNAS is made.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating dynamic task scheduler on AppEngine]]></title>
    <link href="http://drseergio.github.io/blog/2013/09/03/creating-dynamic-task-scheduler-on-appengine/"/>
    <updated>2013-09-03T21:14:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/09/03/creating-dynamic-task-scheduler-on-appengine</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://drseergio.github.io/images/app-engine.png"></p>

<p>I&rsquo;ve been working on a simple hobby project. The goal is to build an Android application which, as it turns out, requires a backend. The most important task of the backend is to perform certain things at specified times in future.</p>

<p>In this post I will explain how I&rsquo;ve designed a simple scheduler which relies on AppEngine cron, tasks and the datastore. We will make a new trivial AppEngine application that ties everything together. Although I normally prefer Python but I&rsquo;ve chosen Java for this project. I guess that&rsquo;s because I wanted some consistency with the Android counter-part that I&rsquo;m also developing.</p>

<!-- more -->


<h2>Why do we need scheduler in the first place?</h2>

<p>To implement the app that I&rsquo;m developing I must be able to send several notifications to selected users starting at a certain time within a specified interval. For example, send 5 notifications to user John with a 2 hour interval starting at 2pm. I believe such mechanism might be generally useful.</p>

<h2>Scheduler design</h2>

<p>My number one goal with the project I&rsquo;m working on is simplicity. I want to make it work. I want to learn few things. I want to end up with fewest lines of code possible. Projects can easily get out of scope and become too much to manage, especially when done out of curiosity and not with a commercial intent. This means scheduler must be as simple as possible and rely on as few parts as possible.</p>

<p>I propose to chiefly rely on the built-in AppEngine cron. Define a cron job that is executed every minute. In that cron job execute scheduled tasks. Each scheduled task has a <code>next_run_ts</code> parameter that specifies when is the next occurrence due. Whenever the cron is run it checks for all tasks that either have <code>next_run_ts</code> equal to current time or are already in the past. For every due scheduled task the cron job creates a background task to execute actual instructions.</p>

<p>The down-side of my design is that the scheduler is only accurate within couple of minutes. This is perfectly acceptable for my use-case.</p>

<h2>Create AppEngine project in Eclipse</h2>

<p>First things first, let&rsquo;s create a new AppEngine project to prototype our scheduler. I assume you have Eclipse installed and configured with Google plugin. If not, head over to a <a href="http://pisarenko.net/blog/2013/08/29/build-an-android-app-using-google-cloud-endpoints-with-oauth/">recent post I have written</a> and read the section about setting up ADT. You don&rsquo;t need ADT if you don&rsquo;t intend to write Android application but since I already have ADT there&rsquo;s no reason to mess with a separate Eclipse installation.</p>

<p>Create a new AppEngine project by clicking <code>File &gt; New &gt; Other... &gt; Google &gt; Web Application Project</code>. Choose any name you want (I&rsquo;ve chosen <code>Scheduler</code>) and specify the package name (I&rsquo;ve selected <code>net.pisarenko.backend.scheduler</code>). Untick <code>Use Google Web Toolkit</code> and <code>Generate project sample code</code> and press <code>Finish</code>.</p>

<h2>Create a test class to generate scheduled tasks</h2>

<p>In order to test our scheduler we must be able to create some tasks first. So our first goal is to create a handler which creates scheduled tasks. I&rsquo;ve called my test class <code>TestGenerator</code>:</p>

<figure class='code'><figcaption><span>TestGenerator.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">pisarenko</span><span class="o">.</span><span class="na">backend</span><span class="o">.</span><span class="na">scheduler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.logging.Logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.DatastoreService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.DatastoreServiceFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.Entity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.Key</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.KeyFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;serial&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestGenerator</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">TestGenerator</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">JOB_PARENT</span> <span class="o">=</span> <span class="s">&quot;notification_job_parent&quot;</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// set parent to ensure data consistency</span>
</span><span class='line'>      <span class="n">Key</span> <span class="n">jobKey</span> <span class="o">=</span> <span class="n">KeyFactory</span><span class="o">.</span><span class="na">createKey</span><span class="o">(</span><span class="s">&quot;NotificationJob&quot;</span><span class="o">,</span> <span class="n">JOB_PARENT</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Entity</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entity</span><span class="o">(</span><span class="s">&quot;NotificationJob&quot;</span><span class="o">,</span> <span class="n">jobKey</span><span class="o">);</span>
</span><span class='line'>      <span class="n">DatastoreService</span> <span class="n">datastore</span> <span class="o">=</span> <span class="n">DatastoreServiceFactory</span><span class="o">.</span><span class="na">getDatastoreService</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">job</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;next_run_ts&quot;</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">/</span> <span class="mi">1000L</span> <span class="o">+</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>      <span class="n">job</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;frequency&quot;</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>      <span class="n">job</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;remaining&quot;</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">datastore</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">job</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">severe</span><span class="o">(</span><span class="s">&quot;Created new job to run every 10 seconds 5 times&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All the code does is it creates a new AppEngine data-store entity of kind <code>NotificationJob</code> when a HTTP GET request is made to this handler. Notice that I use UNIX timestamp as the specification when to run the task. I also take precautions to ensure that written data is consistent by setting a non-existent parent to the saved entity. If you&rsquo;re not familiar with AppEngine&rsquo;s data-store I highly recommend reading about <a href="https://developers.google.com/appengine/docs/java/datastore/structuring_for_strong_consistency">eventual consistency</a> as AppEngine data-store is very different from RDBMS and you must have the right mindset when designing storage for your system.</p>

<p>The intent of the test scheduled task is to execute 6 times within 10 second interval and start in 10 seconds from the moment the handler is called.</p>

<p>Notice that I&rsquo;m using 10 second interval. As you remember, AppEngine cron executes once a minute. This means that the resolution of the cron is not sufficient for running our test task. AppEngine would likely execute all 6 occurrences at the same time. However, we will be using the development server and cron jobs are not executed automatically. We will be acting as a cron ourselves. I will manually access the test handler more often than every 10 seconds for testing purposes.</p>

<p>Let&rsquo;s register our handler at <code>/test</code> by modifying the <code>web.xml</code> file under <code>war/WEB-INF/</code> in the project structure:</p>

<figure class='code'><figcaption><span>web.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>...
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-name&gt;</span>test<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-class&gt;</span>net.pisarenko.backend.scheduler.TestGenerator<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-name&gt;</span>test<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;url-pattern&gt;</span>/test<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>For testing/development/debugging purposes I&rsquo;ve put a log statement. Let&rsquo;s try our generator. Run the project by pressing Ctrl+F11. By default, the development server starts at <code>http://127.0.0.1:8888</code> so our handler is accessible at <code>http://127.0.0.1:8888/test</code>.</p>

<p>Access the test handler and check the output of console in Eclipse. You should see something like this:</p>

<p><img src="http://drseergio.github.io/images/scheduler/console.png"></p>

<p>Our test scheduled task has been saved! Now let&rsquo;s finish this off with the actual task handler.</p>

<h2>Configure cron and the scheduled task handler</h2>

<p>To run our scheduler loop every minute using AppEngine&rsquo;s cron we must create a <code>cron.xml</code> config file in <code>war/WEB-INF</code>:</p>

<figure class='code'><figcaption><span>cron.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;cronentries&gt;</span>
</span><span class='line'>  <span class="nt">&lt;cron&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url&gt;</span>/cron<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>    <span class="nt">&lt;description&gt;</span>Send pending notifications<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>    <span class="nt">&lt;schedule&gt;</span>every 1 minute<span class="nt">&lt;/schedule&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/cron&gt;</span>
</span><span class='line'><span class="nt">&lt;/cronentries&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Effectively, this will execute <code>/cron</code> endpoint every minute. Note that development server will not run cron so we will manually trigger it through the browser by accessing <code>http://127.0.0.1:8888/cron</code>.</p>

<p>Now let&rsquo;s write the code behind the <code>/cron</code> endpoint. The code will check current time, retrieve all scheduled tasks which have next run either in the past or right now and execute them. If the task is supposed to be run several times we will reduce the remaining run counter, calculate the next execution time and save the changes. If the task has no more runs we delete the entity from the data-store:</p>

<figure class='code'><figcaption><span>NotificationScheduler.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">pisarenko</span><span class="o">.</span><span class="na">backend</span><span class="o">.</span><span class="na">scheduler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.logging.Logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.DatastoreService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.DatastoreServiceFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.Entity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.Key</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.KeyFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.PreparedQuery</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.Query</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.Query.FilterPredicate</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.datastore.Query.FilterOperator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.taskqueue.Queue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.taskqueue.QueueFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">appengine</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">taskqueue</span><span class="o">.</span><span class="na">TaskOptions</span><span class="o">.</span><span class="na">Builder</span><span class="o">.*;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;serial&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NotificationScheduler</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">NotificationScheduler</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'>            <span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">severe</span><span class="o">(</span><span class="s">&quot;Running cron loop&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">currentTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">/</span> <span class="mi">1000L</span><span class="o">;</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">severe</span><span class="o">(</span><span class="s">&quot;Current time: &quot;</span> <span class="o">+</span> <span class="n">currentTime</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DatastoreService</span> <span class="n">datastore</span> <span class="o">=</span> <span class="n">DatastoreServiceFactory</span>
</span><span class='line'>                <span class="o">.</span><span class="na">getDatastoreService</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Key</span> <span class="n">jobKey</span> <span class="o">=</span> <span class="n">KeyFactory</span><span class="o">.</span><span class="na">createKey</span><span class="o">(</span><span class="s">&quot;NotificationJob&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">TestGenerator</span><span class="o">.</span><span class="na">JOB_PARENT</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Query</span><span class="o">(</span><span class="s">&quot;NotificationJob&quot;</span><span class="o">,</span> <span class="n">jobKey</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setAncestor</span><span class="o">(</span><span class="n">jobKey</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setFilter</span><span class="o">(</span>
</span><span class='line'>                        <span class="k">new</span> <span class="nf">FilterPredicate</span><span class="o">(</span><span class="s">&quot;next_run_ts&quot;</span><span class="o">,</span>
</span><span class='line'>                                <span class="n">FilterOperator</span><span class="o">.</span><span class="na">LESS_THAN_OR_EQUAL</span><span class="o">,</span> <span class="n">currentTime</span><span class="o">));</span>
</span><span class='line'>        <span class="n">PreparedQuery</span> <span class="n">pq</span> <span class="o">=</span> <span class="n">datastore</span><span class="o">.</span><span class="na">prepare</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Entity</span> <span class="n">job</span> <span class="o">:</span> <span class="n">pq</span><span class="o">.</span><span class="na">asIterable</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">processJob</span><span class="o">(</span><span class="n">job</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">processJob</span><span class="o">(</span><span class="n">Entity</span> <span class="n">job</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Queue</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">QueueFactory</span><span class="o">.</span><span class="na">getDefaultQueue</span><span class="o">();</span>
</span><span class='line'>        <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">withUrl</span><span class="o">(</span><span class="s">&quot;/sender&quot;</span><span class="o">).</span><span class="na">param</span><span class="o">(</span><span class="s">&quot;job_id&quot;</span><span class="o">,</span> <span class="s">&quot;job_id&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DatastoreService</span> <span class="n">datastore</span> <span class="o">=</span> <span class="n">DatastoreServiceFactory</span>
</span><span class='line'>                <span class="o">.</span><span class="na">getDatastoreService</span><span class="o">();</span>
</span><span class='line'>      <span class="n">job</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;remaining&quot;</span><span class="o">,</span> <span class="o">((</span><span class="n">Long</span><span class="o">)</span> <span class="n">job</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;remaining&quot;</span><span class="o">))</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">((</span><span class="n">Long</span><span class="o">)</span><span class="n">job</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;remaining&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">datastore</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">job</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">job</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;next_run_ts&quot;</span><span class="o">,</span>
</span><span class='line'>              <span class="o">((</span><span class="n">Long</span><span class="o">)</span><span class="n">job</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;next_run_ts&quot;</span><span class="o">))</span> <span class="o">+</span> <span class="o">((</span><span class="n">Long</span><span class="o">)</span><span class="n">job</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;frequency&quot;</span><span class="o">)));</span>
</span><span class='line'>          <span class="n">datastore</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">job</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The handler executes a query against the data-store to retrieve due scheduled tasks. Note that it uses ancestor query to ensure that return values are consistent. Then we iterate through retrieved scheduled tasks and execute <code>processJob</code> method. The <code>processJob</code> introduces AppEngine default queue which we use for executing our scheduled tasks in the background.</p>

<p>Update <code>web.xml</code> for the new handler:</p>

<figure class='code'><figcaption><span>web.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>...
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-name&gt;</span>cron<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-class&gt;</span>net.pisarenko.backend.scheduler.NotificationScheduler<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-name&gt;</span>cron<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;url-pattern&gt;</span>/cron<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>At this point the code won&rsquo;t work because the <code>processJob</code> method is creating queue tasks (not to confuse with our custom scheduled tasks) to be run in the background. Let&rsquo;s fix that!</p>

<h2>Use the default AppEngine queue for executing scheduled tasks</h2>

<p>AppEngine provides functionality to execute code in the background. The easiest way is to use the default push queue. Basically, you tell the default push queue what endpoint should handle the task and AppEngine will execute that endpoint in background. You can also provide parameters that will be populated as HTTP request parameters. No additional configuration is needed, simply instantiate the queue as in our test code.</p>

<p>In the code above we call endpoint <code>/sender</code> with parameter <code>job_id</code> whose value is always <code>job_id</code>. Obviously, this is not a very useful parameter as it stands. However, in future I will change this parameter to provide enough information to the background task handler to carry out execution of the task. For example, the parameter could provide a key to an entity that contains users which should be notified.</p>

<p>The code for the <code>/sender</code> handler:</p>

<figure class='code'><figcaption><span>NotificationSender.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">pisarenko</span><span class="o">.</span><span class="na">backend</span><span class="o">.</span><span class="na">scheduler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.logging.Logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;serial&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NotificationSender</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">NotificationSender</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">severe</span><span class="o">(</span><span class="s">&quot;EXECUTING TASK FROM QUEUE &quot;</span> <span class="o">+</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&quot;job_id&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, it does not do much but it provides the almighty log statement which we will use to confirm that our code is working as we want it to. Finally, update <code>web.xml</code> with <code>/sender</code>:</p>

<figure class='code'><figcaption><span>web.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>...
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>sender<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-class&gt;</span>net.pisarenko.backend.scheduler.NotificationSender<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>  
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>sender<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>/sender<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>Final run</h2>

<p>Run the application from Eclipse and open your browser. First, access <code>http://127.0.0.1:8888/cron</code> and observe that <code>EXECUTING TASK FROM QUEUE job_id</code> is displayed in console output. By accessing <code>/cron</code> you&rsquo;re acting as a manual cron. Remember when we ran <code>/test</code>? Exactly, this is why our cron handler is now executing those long due tasks! Refresh the page several times to make sure that all 6 occurrences are run.</p>

<p>Then, run <code>/test</code> to create another test scheduled task and quickly access <code>/cron</code> handler again. If you refresh the browser window often enough you will observe that the scheduled task is executed only when 10 seconds have elapsed since the last execution. Sweet, our scheduler is working!</p>

<p>As a next step, experiment with the test generator and try the code in production AppEngine. As for myself, I&rsquo;m going to integrate this piece into the project I&rsquo;m working on. I prefer to build applications by prototyping separate pieces one at a time. This way I at least have an idea of what to expect from each comopnent and know how to integrate it into the bigger design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTPC build I'm proud of]]></title>
    <link href="http://drseergio.github.io/blog/2013/09/01/htpc-build-i-slash-m-proud-of/"/>
    <updated>2013-09-01T17:38:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/09/01/htpc-build-i-slash-m-proud-of</id>
    <content type="html"><![CDATA[<p>If you follow what I write here and on <a href="http://grow-slowly.com">http://grow-slowly.com</a> you will notice that I am somewhat obsessed with reducing the number of possessions in my life. This directly contradicts another, though negative, characteristic of mine &ndash; to get more gadgets and possessions.</p>

<p>Recently, I have had a lot of good progress on challenging the negative trait. Not only I&rsquo;ve been more successful on overcoming the purchasing obsession but I&rsquo;ve also found ways to enjoy more and get creative at reusing what I already have.</p>

<p>One of my recent projects was to combine several devices into one. I&rsquo;ve got rid of Sony Playstation 3 and merged 2 computers together. Here&rsquo;s the end-result:</p>

<p><a href="http://drseergio.github.io/images/htpc/2.jpg"><img src="http://drseergio.github.io/images/htpc/2.jpg" width="500"></a></p>

<!-- more -->


<p>Just one neat-looking HTPC (home theater personal computer) that fits into the living room! Why did I have 3 devices in the first place? Well, I&rsquo;ve obviously used Sony Playstation 3 for playing games. I&rsquo;m not an obsessive gamer but I do enjoy certain games once in a while. I appreciate the fact that once you own a console no hardware upgrades are necessary. The down-side is that the graphics quality is lower than on PCs as the technology advances and the console stays the same.</p>

<p>Second, I had a server running gentoo Linux with relatively high computational power &ndash; modern i7 Intel processor, 32GB RAM and a pair of SSD drives. I&rsquo;ve used the machine for doing relatively-taxing statistical calculations, VMs and later ran a bittorrent downloader.</p>

<p>Third, I had an HTPC to watch movies and listen music. I don&rsquo;t like an idea of using an off-the-shelf media player. New formats get released every now and then and some videos are available online on certain sites only. Chances are that sooner or later there will be a video that the off-the-shelf box can&rsquo;t play. Having a full-blown PC has full flexibility as I can always install newer software or use a standard desktop browser to open any streaming site. Although I actively use XBMC for great viewing experience I&rsquo;ve intentionally left the full KDE desktop experience as I don&rsquo;t want to mask the functionality of a computer. By the way, the HTPC had been powered by an Asus E350 board (similar to what I currently use in <a href="http://pisarenko.net/blog/2013/08/28/impressions-from-freenas/">my NAS build</a>) and a passively cooled nVidia Geforce 610. Couple that together with a passive Seasonic power supply and you get a completely quiet computer!</p>

<p>I&rsquo;ve realized that I was wasting resources. I can play games on a PC (apart from few PS3 exclusives) so I don&rsquo;t really need a PS3. The server is already running 24x7 so why can&rsquo;t I use it as HTPC? With that idea in mind I&rsquo;ve decided to merge 2 computers together and sell the PS3 to a colleague.</p>

<p>I admit the conversion was far from frugal as I had to purchase a powerful graphics card to allow gaming. In addition, the cooling system I had in the server would not fit in the relatively compact Antec Fusion Remote case (Corsair H100). Finally, the power supply I had was not powerful enough.</p>

<p>The final spec list I arrived at:</p>

<ul>
<li><p>Antec Fusion Remote case (re-used from existing HTPC)</p></li>
<li><p>Asus ROG IV Gene mATX motherboard (re-used from the server)</p></li>
<li><p>Intel i7 i3930K CPU (re-used from the server)</p></li>
<li><p>32GB RAM (re-used from the server)</p></li>
<li><p>2x60GB Intel SSD (re-used from the server)</p></li>
<li><p>750W Seasonic X series PSU (bought)</p></li>
<li><p>1x60GB SSD (bought, for installing Windows 7 on it)</p></li>
<li><p>2xnVidia Zotac GeForce 660 in SLI mode (bought, to be able to play games)</p></li>
<li><p>Windows 7 license (bought, to be able to play games)</p></li>
<li><p>LG BluRay writer (bought, to install Windows and have at least 1 optical drive at home)</p></li>
<li><p>2x120mm NoiseBlocker case fans (re-used from the server)</p></li>
<li><p>Noctua NH-U12P SE2 CPU cooler (bought)</p></li>
</ul>


<p>The unused internals from the existing server and HTPC were either sold or given away to those who need them. Nothing was thrown away.</p>

<p>The final under-the-hood view of the build:</p>

<p><a href="http://drseergio.github.io/images/htpc/4.jpg"><img src="http://drseergio.github.io/images/htpc/4.jpg" width="500"></a></p>

<p>I&rsquo;ve installed Windows 7 on a separate SSD. When I want to play games I have to reboot the machine into Windows 7. The down-side is that the server is temporarily unavailable. It&rsquo;s an acceptable solution for my purposes as I&rsquo;m the only user of the server and I don&rsquo;t actively need the server while I&rsquo;m playing. In addition, I play only a couple of hours every other week.</p>

<p>I have been a little worried that I would not be able to fit all the hardware in the case but everything got in surprisingly well. It&rsquo;s not possible to fit in a 7-generation nVidia as the new cards are considerably longer (ca 30 cm vs 19cm GeForce 660). I hope future GPU generations will reverse the trend.</p>

<p>Another concern is noise. I was pleasantly surprised that the end result is not loud. At least not when it&rsquo;s running as a server. It makes a lot of noise when I play but then the issue is not relevant as the sound from speakers is much louder. I can heartily recommend Zotac&rsquo;s graphics cards as they are quiet unless you&rsquo;re gaming. The 750W PSU from Seasonic is similar as it has a fan that turns on only under heavy load. The Noctua CPU cooler is also quiet.</p>

<p>Now I can play games, watch movies and perform computational tasks all from one machine. And most importantly it fits well within the interior:</p>

<p><a href="http://drseergio.github.io/images/htpc/3.jpg"><img src="http://drseergio.github.io/images/htpc/3.jpg" width="300"></a> <a href="http://drseergio.github.io/images/htpc/1.jpg"><img src="http://drseergio.github.io/images/htpc/1.jpg" width="300"></a></p>

<p>It is clear to me that in future this machine will get obsolete as newer games require faster hardware. This means that I&rsquo;ll likely need to upgrade graphics cards. The issue is that newer cards are also likely to be long so I&rsquo;ll need a different case. When that happens I have my eyes on Antec Fusion Remote Max. The &ldquo;Max&rdquo; version should have enough space.</p>

<p>I&rsquo;m glad I got rid of a few things. I wasn&rsquo;t very frugal at it but at least <a href="http://grow-slowly.com/2013/08/24/an-update-on-my-frugality-efforts/">I&rsquo;m getting better at it</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build an Android app using Google Cloud Endpoints and OAuth]]></title>
    <link href="http://drseergio.github.io/blog/2013/08/29/build-an-android-app-using-google-cloud-endpoints-with-oauth/"/>
    <updated>2013-08-29T13:20:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/08/29/build-an-android-app-using-google-cloud-endpoints-with-oauth</id>
    <content type="html"><![CDATA[<p>Recently I came up with an idea for a mobile application. To be honest, it&rsquo;s more of an excuse to try my hand at writing Android applications and do something new. Since I had almost zero experience with Android I have started by reading the official Google guides and then doing some napkin grade designs of the application architecture.</p>

<p>Immediately I have realized that app requires a back-end as some of the things cannot be reliably performed on the handset itself. Lurking around I have learned about Google Cloud Endpoints lets you create a REST API that clients (be that iOS, Android or JavaScript) can access. Furthermore, my application needs to know who is talking to the back-end so authentication is a hard requirement.</p>

<p><img class="right" src="http://drseergio.github.io/images/endpoints/endpoints.png"></p>

<p>I don&rsquo;t know about you but personally my productivity is high only when I have a reliable development environment that provides immediate feedback. My first goal then was to create a local environment where I could prototype with Google APIs piece by piece and proceed with building the actual app.</p>

<p>It turned that there are many official pages and guides talking about Google Endpoints and the integration with Android. There is even a 1-click solution called the Mobile Backend Starter. My problem with such solutions is that I don&rsquo;t get a feel for what is being done for me so I prefer to start with the smallest amount of code possible and incrementally build on top of it.</p>

<p>In this article I will guide you through creating a trivial Android application that talks to a back-end powered by Google Cloud Endpoints. Ultimately, the back-end would run on AppEngine but my immediate goal is to provide you with a reliable local development environment where you could try things out. To sum up here are our goals:</p>

<ul>
<li><p>create a dev environment for writing and exploring Android apps that talk to Google Cloud Endpoints (GCE) back-end</p></li>
<li><p>use OAuth to authenticate the app to the back-end</p></li>
<li><p>create a simple Android app that demonstrates Android app talking to the GCE back-end and using OAuth to authenticate against the back-end</p></li>
</ul>


<p>I assume you are comfortable with Java but have not done much Android programming and are not familiar with any of the Google cloud products. I assume you are a quick learner and will look things up when something isn&rsquo;t clear. I also assume you&rsquo;re running Linux. I believe instructions are the same for OSX but have no idea about Windows.</p>

<!-- more -->


<p>Our Android app will have a button and a text field. When the button is pressed the app will authenticate against the back-end, make a call on a back-end endpoint and put the result in the text field. The endpoint will return the e-mail of the authenticated user. Let&rsquo;s get started.</p>

<h2>Install Android SDK and Google tools</h2>

<p>First, we&rsquo;ll install the Android SDK (called ADT) which is basically an Eclipse IDE bundled with Android-specific tools. Since ADT is Eclipse I use it for both, developing the Android app and the back-end. Head over to <a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</a> to download the bundle.</p>

<p>Once you download the bundle unpack it and execute <code>eclipse/eclipse</code> from within the ADT directory. ADT will start up:</p>

<p><img src="http://drseergio.github.io/images/endpoints/adt.png"></p>

<p>Choose a folder where you will keep all your projects.</p>

<p>Once ADT starts close the default tab and head over to menubar item <code>Help &gt; Install New Software</code>. We&rsquo;ll need to add Google Eclipse Plugin to have AppEngine integration in ADT. You&rsquo;ll need the URL of the plugin repository. You can find the URL at <a href="https://developers.google.com/eclipse/docs/getting_started">https://developers.google.com/eclipse/docs/getting_started</a>. Currently, ADT is Eclipse version 3.8/4.2 so I&rsquo;m using URL <code>http://dl.google.com/eclipse/plugin/4.2</code>. Put that URL into field <code>Work with</code> and press <code>Add</code>, then choose an arbitrary name (say, Google) and click <code>OK</code>. Make sure you select the components shown in the screen-shot below:</p>

<p><img src="http://drseergio.github.io/images/endpoints/gep.png"></p>

<p>Click <code>Next</code>, accept the license agreements and press <code>Finish</code> to begin installation. Once the additional software is installed and ADT has restarted we&rsquo;ll need one more piece. Open <code>Window &gt; Android SDK Manager</code>. You&rsquo;ll need to select <code>Google APIs</code> for the latest Android version. In my case, the latest is 4.3:</p>

<p><img src="http://drseergio.github.io/images/endpoints/apis.png"></p>

<p>We&rsquo;ll also need <code>Google Play Services</code> library for authenticating our app to the back-end:</p>

<p><img src="http://drseergio.github.io/images/endpoints/play.png"></p>

<p>At this point we have installed all software that we&rsquo;ll need for developing and testing our code.</p>

<h2>Create Google Cloud project</h2>

<p>Since our ultimate intention is to run back-end on Google servers using AppEngine we&rsquo;ll go through steps to provision a new &ldquo;Google cloud project&rdquo; in the &ldquo;Google cloud console&rdquo;. This is required even if you intend to perform local testing only. Specifically, we&rsquo;ll be creating so-called client IDs which are needed to allow our Android app to talk to the back-end.</p>

<p>Head over to <a href="https://cloud.google.com/console">https://cloud.google.com/console</a> and create a new project. Choose any name you want:</p>

<p><img src="http://drseergio.github.io/images/endpoints/project.png"></p>

<p>Once the project is created click on <code>APIs &amp; auth &gt; Registered apps</code> and press on <code>REGISTER APP</code>. Next, select <code>Web Application</code> and use any name you want:</p>

<p><img src="http://drseergio.github.io/images/endpoints/register_web.png"></p>

<p>At this point you should note down the resulting OAuth2 client ID, we&rsquo;ll make use of it in our code:</p>

<p><img src="http://drseergio.github.io/images/endpoints/oauth_client.png"></p>

<p>In my case, the web client ID is <code>607077117986.apps.googleusercontent.com</code>.</p>

<p>We&rsquo;ll need to perform similar steps for obtaining Android client ID. For this you will need SHA1 checksum of the key used to sign Android app package. During the development phase normally the debug key is used. By default it&rsquo;s stored in <code>~/.android/debug.keystore</code>. To obtain the checksum type the following in the terminal:</p>

<p><code>$ keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1</code></p>

<p>Type <code>android</code> when asked for a password and note down the value returned to you. Go back to the cloud console and press <code>REGISTER APP</code>. This time choose <code>Android</code>, specify any name you want. In addition, you will need to input the checksum we obtained earlier and specify our Android app package name. We have not yet created our app but let&rsquo;s decide on package name now. I&rsquo;ve chosen <code>net.pisarenko</code>. Unless you&rsquo;re feeling creative right now leave it as it is:</p>

<p><img src="http://drseergio.github.io/images/endpoints/android.png"></p>

<p>We&rsquo;ll need to note down the Android client ID similarly to what we have done with the web client ID:</p>

<p><img src="http://drseergio.github.io/images/endpoints/androidoauth.png"></p>

<p>In this case it&rsquo;s <code>607077117986-vg4219rv8eljhkhq3648j45ov62vran1.apps.googleusercontent.com</code>.</p>

<p>Great job, we&rsquo;re done with configuring the cloud! Let&rsquo;s finally create our app!</p>

<h2>Create AppEngine-powered Android app</h2>

<p>As a first step we&rsquo;ll create 2 projects using a pre-defined IDE template. One project is for the Android app. The other one is for the back-end. To create the projects open <code>File &gt; New &gt; Other &gt; Google &gt; App Engine &gt; Connected Android Project</code>. Then choose a name (I chose <code>MyTestApp</code>) and specify <code>net.pisarenko</code> as the package name. You are free to choose a different package name but it must be the same as the one you chose in cloud console. Click <code>Finish</code>.</p>

<p>At this point you&rsquo;ll have 2 projects. <code>MyTestApp</code> is the Android app. <code>MyTestApp-AppEngine</code> is the back-end:</p>

<p><img src="http://drseergio.github.io/images/endpoints/projects.png"></p>

<h2>Write/alter the back-end code</h2>

<p>At this point we have some generated code but as I mentioned in the introduction I don&rsquo;t like that. I prefer to start <em>really minimal</em> so that I understand what&rsquo;s happening. Let&rsquo;s start by deleting all files under <code>MyTestApp-AppEngine &gt; src &gt; net.pisarenko</code> so it looks like this:</p>

<p><img src="http://drseergio.github.io/images/endpoints/deleted.png"></p>

<p>By doing this we have deleted the default endpoints provided by the template. Now we&rsquo;ll write our own endpoint. First, it&rsquo;s important to realize that Cloud endpoints operate on POJO objects (basically Java objects with getters and setters) so you can&rsquo;t just send a string or expect a string in return from the back-end. We&rsquo;ll start by defining some simple objects. Let&rsquo;s create one class to represent a request argument and another class for the return value. Create a class <code>MyRequest</code> with the following code:</p>

<figure class='code'><figcaption><span>MyRequest.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">pisarenko</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyRequest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMessage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the use of <code>@Entity</code> annotation. And a similar class for the result value:</p>

<figure class='code'><figcaption><span>MyResult.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">pisarenko</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyResult</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MyResult</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s create a simple endpoint. I&rsquo;ve called it <code>MyEndpoint</code>. Take note of annotations, I believe most of them are self-explanatory:</p>

<figure class='code'><figcaption><span>MyEndpoint.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">pisarenko</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.api.server.spi.config.Api</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.api.server.spi.config.ApiMethod</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.api.server.spi.config.ApiNamespace</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.logging.Logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Api</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;myendpoint&quot;</span><span class="o">,</span> <span class="n">namespace</span> <span class="o">=</span> <span class="nd">@ApiNamespace</span><span class="o">(</span>
</span><span class='line'>    <span class="n">ownerDomain</span> <span class="o">=</span> <span class="s">&quot;pisarenko.net&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">ownerName</span> <span class="o">=</span> <span class="s">&quot;pisarenko.net&quot;</span><span class="o">,</span> <span class="n">packagePath</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">))</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyEndpoint</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span>
</span><span class='line'>        <span class="n">MyEndpoint</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ApiMethod</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;compute&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MyResult</span> <span class="nf">compute</span><span class="o">(</span><span class="n">MyRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">severe</span><span class="o">(</span><span class="s">&quot;API CALLED&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyResult</span><span class="o">(</span><span class="s">&quot;HELLO &quot;</span> <span class="o">+</span> <span class="n">req</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, the API will be exposed under name <code>myendpoint</code> and the endpoint is going to be called <code>compute</code>. The endpoint logs the call, takes the input value and returns a string wrapped into a <code>MyResult</code> POJO.</p>

<p>After you make changes to the back-end you must regenerate client libraries before you run the back-end or try to use new/changed functionality in the client. To regenerate simply right click the back-end project and choose <code>Google &gt; Generate Cloud Endpoint Library</code>:</p>

<p><img src="http://drseergio.github.io/images/endpoints/generate.png"></p>

<h3>API explorer</h3>

<p>Wow, we have a back-end. Now, wouldn&rsquo;t it be cool if we could try it out without the hassle of deploying it? Well, that&rsquo;s possible using Google API Explorer. The coolest part is that API explorer works with locally run back-ends!</p>

<p>First, we&rsquo;ll need to start our back-end locally. Click <code>Run &gt; Run</code>. Unless port 8888 is used on your machine the back-end will start and you&rsquo;ll see output in Eclipse console:</p>

<p><img src="http://drseergio.github.io/images/endpoints/appengine.png"></p>

<p>Note that I&rsquo;m running my back-end on port 8080 as port 8888 is occupied on my machine for something else. Now, the magic part. Point your browser to <a href="https://developers.google.com/apis-explorer/?base=http://localhost:8888/_ah/api#p/">https://developers.google.com/apis-explorer/?base=http://localhost:8888/_ah/api#p/</a> and you&rsquo;ll see your endpoint magically appearing:</p>

<p><img src="http://drseergio.github.io/images/endpoints/api1.png"></p>

<p>You can make interactive calls to your local back-end right in the explorer and observe the output (again, note that I&rsquo;m using port 8080 and not 8888):</p>

<p><img src="http://drseergio.github.io/images/endpoints/api2.png"></p>

<p>Observe that when you&rsquo;re doing these calls the console output in ADT logs a line <code>API CALLED</code> which confirms that we&rsquo;re executing it! Without API explorer it would be harder to test and develop endpoints. You would need to craft complicated HTTP requests or write a test client.</p>

<h3>Add authentication</h3>

<p>At this point we have a working back-end with an endpoint. Before we move on to our Android app let&rsquo;s implement authentication. After all, the Android app I&rsquo;m working on must be able to identify itself to the back-end in order to retrieve user&rsquo;s items.</p>

<p>We&rsquo;ll need to include client IDs that we had generated previously and update our endpoint. Let&rsquo;s create constants for the client IDs. I&rsquo;ll create a separate class called <code>Ids</code>:</p>

<figure class='code'><figcaption><span>Ids.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">pisarenko</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Ids</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">WEB_CLIENT_ID</span> <span class="o">=</span>
</span><span class='line'>            <span class="s">&quot;607077117986.apps.googleusercontent.com&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ANDROID_CLIENT_ID</span> <span class="o">=</span>
</span><span class='line'>            <span class="s">&quot;607077117986-vg4219rv8eljhkhq3648j45ov62vran1.apps.googleusercontent.com&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ANDROID_AUDIENCE</span> <span class="o">=</span> <span class="n">WEB_CLIENT_ID</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember, these are the same IDs that we previously got from the cloud console. Next, we need to update the endpoint code to use authentication:</p>

<figure class='code'><figcaption><span>MyEndpoint.java(updated) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">pisarenko</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.api.server.spi.config.Api</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.api.server.spi.config.ApiMethod</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.api.server.spi.config.ApiNamespace</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.appengine.api.users.User</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">spi</span><span class="o">.</span><span class="na">Constant</span><span class="o">.</span><span class="na">API_EXPLORER_CLIENT_ID</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.logging.Logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Api</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;myendpoint&quot;</span><span class="o">,</span> <span class="n">namespace</span> <span class="o">=</span> <span class="nd">@ApiNamespace</span><span class="o">(</span><span class="n">ownerDomain</span> <span class="o">=</span> <span class="s">&quot;pisarenko.net&quot;</span><span class="o">,</span> <span class="n">ownerName</span> <span class="o">=</span> <span class="s">&quot;pisarenko.net&quot;</span><span class="o">,</span> <span class="n">packagePath</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">))</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyEndpoint</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">MyEndpoint</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ApiMethod</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;compute&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">clientIds</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Ids</span><span class="o">.</span><span class="na">WEB_CLIENT_ID</span><span class="o">,</span>
</span><span class='line'>                <span class="n">Ids</span><span class="o">.</span><span class="na">ANDROID_CLIENT_ID</span><span class="o">,</span>
</span><span class='line'>                <span class="n">API_EXPLORER_CLIENT_ID</span> <span class="o">},</span>
</span><span class='line'>            <span class="n">audiences</span> <span class="o">=</span> <span class="o">{</span> <span class="n">Ids</span><span class="o">.</span><span class="na">WEB_CLIENT_ID</span><span class="o">,</span> <span class="n">Ids</span><span class="o">.</span><span class="na">ANDROID_CLIENT_ID</span> <span class="o">},</span>
</span><span class='line'>            <span class="n">scopes</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>                <span class="s">&quot;https://www.googleapis.com/auth/userinfo.email&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;https://www.googleapis.com/auth/userinfo.profile&quot;</span> <span class="o">})</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MyResult</span> <span class="nf">compute</span><span class="o">(</span><span class="n">MyRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">severe</span><span class="o">(</span><span class="s">&quot;CALLING&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">MyResult</span><span class="o">(</span><span class="s">&quot;HELLO &quot;</span> <span class="o">+</span> <span class="n">req</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">MyResult</span><span class="o">(</span><span class="s">&quot;HELLO &quot;</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Observe what we have introduced:</p>

<ol>
<li><p>added <code>clientIds</code>, <code>audiences</code> and <code>scopes</code> to the <code>@ApiMethod</code> annotation. <code>API_EXPLORER_CLIENT_ID</code> client ID is needed if we want to allow API explorer to work with our endpoint. Since we&rsquo;re in development/debug mode we surely want that. I don&rsquo;t yet fully understand what the <code>audiences</code> is used for. <code>scopes</code> defines what information we will get from the user.</p></li>
<li><p>added <code>User</code> parameter to the method. If necessary you can throw an exception if someone tries to use the endpoint without a valid identity.</p></li>
</ol>


<p>Our endpoint will now return a string with user&rsquo;s e-mail address if she is authenticated. Let&rsquo;s try this out! Regenerate the endpoint library, stop the back-end if it&rsquo;s running and start it. Then open the API explorer.</p>

<p>Refresh the page to make sure that API explorer has an updated view of your endpoint. First, try using the endpoint same way as you did before and confirm that the behavior is the same.</p>

<p>Then, click the <code>Authorize requests using OAuth 2.0</code> button on the right of the API explorer. You&rsquo;ll be present with the following dialog:</p>

<p><img src="http://drseergio.github.io/images/endpoints/scopes.png"></p>

<p>Select both scopes and click <code>Authorize</code>. This basically means that you grant your own back-end to access certain information from your Google account. Another dialog might appear asking whether you grant access or not. Allow it.</p>

<p>Do another call again. Notice that the return value is different this time. Your e-mail is now returned! Well, in the case of API explorer the value will always be <code>example@example.com</code>:</p>

<p><img src="http://drseergio.github.io/images/endpoints/scopes2.png"></p>

<p>Nevertheless, realize that we now have a fully functioning back-end that is authenticated with OAuth2! And we&rsquo;re running the back-end locally and accessing it through API explorer. Let&rsquo;s get our Android app working.</p>

<h2>The Android app</h2>

<h3>Setup the Android emulator</h3>

<p>First, we&rsquo;ll create a virtual Android device on which we&rsquo;ll run our app. Open virtual device manager by clicking <code>Window &gt; Android Virtual Device Manager</code>. You can choose any name you want. It is important to choose target as <code>Google APIs</code>. If you don&rsquo;t see such option you need to make sure that you have installed Google APIs and Play services. Re-read this guide and possibly restart ADT. Here are some example settings:</p>

<p><img src="http://drseergio.github.io/images/endpoints/virtual.png"></p>

<p>Once the device is created start it by selecting it from the device manager and pressing <code>Start...</code>. It takes a while to start it even on a relatively powerful computer. Usually, the emulator is not fast.</p>

<h3>Integrate Google Play project</h3>

<p>For authentication to work in Android we need to include Google Play project and reference it in our project. To import the project choose <code>File &gt; Import &gt; Android &gt; Existing Android Code Into Workspace &gt; Browse</code>. Navigate to where you keep the unpacked Android SDK, choose <code>sdk\extras\google\google_play_services\libproject\google-play-services_lib</code>, and click <code>OK</code> and <code>Finish</code>. You will now have 3 projects in your workspace, including newly imported <code>google-play-services_lib</code>. You must now include it as a dependency in the Android app project.</p>

<p>Right click the Android app project and choose <code>Properties</code>. Then, navigate to <code>Android</code>. You will need to set the build target as <code>Google APIs</code> and add the <code>google-play-services_lib</code> library:</p>

<p><img src="http://drseergio.github.io/images/endpoints/libs.png"></p>

<h3>Delete template code</h3>

<p>We will delete some of the template code similarly to what we have done with the back-end. Delete classes <code>GCMIntentService.java</code> and <code>RegisterActivity.java</code>. Then, delete code from <code>MainActivity.java</code> so it looks like this:</p>

<figure class='code'><figcaption><span>MainActivity.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">pisarenko</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Delete the file <code>activity_register.xml</code> from <code>res/layout</code> folder. At this point we have an app which shows <code>Hello world!</code> when started. Nevertheless, let&rsquo;s confirm that it&rsquo;s working by clicking <code>Run &gt; Run As &gt; Android Application</code>. Make sure that the Android project is selected.</p>

<h3>Write the app</h3>

<p>Let&rsquo;s make our app work. Our goal is to invoke the endpoint and get back our own e-mail address. For this purpose we&rsquo;ll add a button. When the button is clicked the app will make a call to the back-end and display the result in a text field. If necessary, the app will ask you to choose a Google account to use.</p>

<p>First, let&rsquo;s add a button. Double click on <code>res/layout/activity_main.xml</code>. You&rsquo;ll be presented with the graphical UI editor for the app&rsquo;s default (and, in our case, only) screen. Drag a button from the left panel somewhere on the screen and save the result:</p>

<p><img src="http://drseergio.github.io/images/endpoints/button.png"></p>

<p>If you double-click the button you will be shown the underlying XML code for the user interface. You&rsquo;ll see that the button is given ID <code>button1</code>. We&rsquo;ll need this to execute a custom action when the button is pressed.</p>

<p>One class that we have not deleted is <code>CloudEndpointUtils.java</code>. Open it and change the field <code>LOCAL_ANDROID_RUN</code> to <code>true</code>. As you have guessed, it means that the app will be using a locally run back-end. While you&rsquo;re in the file make sure that the port number is correct. I have changed <code>8888</code> to <code>8080</code> because my back-end is running on port 8080 locally. Although we have deleted template code we will be actually relying on some of it.</p>

<p>Open <code>MainActivity.java</code> and put the following code in:</p>

<figure class='code'><figcaption><span>MainActivity.java(updated) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">pisarenko</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.api.client.extensions.android.http.AndroidHttp</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.api.client.json.jackson.JacksonFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">net.pisarenko.myendpoint.Myendpoint</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">net.pisarenko.myendpoint.model.MyRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">net.pisarenko.myendpoint.model.MyResult</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.AsyncTask</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.Button</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View.OnClickListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.TextView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.accounts.AccountManager</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Intent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Myendpoint</span> <span class="n">endpoint</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">GoogleAccountCredential</span> <span class="n">credential</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REQUEST_ACCOUNT_PICKER</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">WEB_CLIENT_ID</span> <span class="o">=</span> <span class="s">&quot;607077117986.apps.googleusercontent.com&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">credential</span> <span class="o">=</span> <span class="n">GoogleAccountCredential</span><span class="o">.</span><span class="na">usingAudience</span><span class="o">(</span><span class="k">this</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;server:client_id:&quot;</span> <span class="o">+</span> <span class="n">WEB_CLIENT_ID</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">chooseAccount</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Myendpoint</span><span class="o">.</span><span class="na">Builder</span> <span class="n">endpointBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Myendpoint</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span>
</span><span class='line'>            <span class="n">AndroidHttp</span><span class="o">.</span><span class="na">newCompatibleTransport</span><span class="o">(),</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">JacksonFactory</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">credential</span><span class="o">);</span>
</span><span class='line'>        <span class="n">endpoint</span> <span class="o">=</span> <span class="n">CloudEndpointUtils</span><span class="o">.</span><span class="na">updateBuilder</span><span class="o">(</span><span class="n">endpointBuilder</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">DoSomethingAsync</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">endpoint</span><span class="o">).</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onActivityResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">requestCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">REQUEST_ACCOUNT_PICKER:</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">data</span><span class="o">.</span><span class="na">getExtras</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">accountName</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getExtras</span><span class="o">().</span><span class="na">getString</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">AccountManager</span><span class="o">.</span><span class="na">KEY_ACCOUNT_NAME</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">accountName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">credential</span><span class="o">.</span><span class="na">setSelectedAccountName</span><span class="o">(</span><span class="n">accountName</span><span class="o">);</span>
</span><span class='line'>                    <span class="c1">// User is authorized.</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">chooseAccount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">startActivityForResult</span><span class="o">(</span><span class="n">credential</span><span class="o">.</span><span class="na">newChooseAccountIntent</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">REQUEST_ACCOUNT_PICKER</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">DoSomethingAsync</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">MyResult</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Myendpoint</span> <span class="n">endpoint</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">DoSomethingAsync</span><span class="o">(</span><span class="n">OnClickListener</span> <span class="n">onClickListener</span><span class="o">,</span>
</span><span class='line'>                <span class="n">Myendpoint</span> <span class="n">endpoint</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">endpoint</span> <span class="o">=</span> <span class="n">endpoint</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">MyResult</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">Void</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">MyRequest</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyRequest</span><span class="o">();</span>
</span><span class='line'>                <span class="n">r</span><span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="s">&quot;Tesla&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">endpoint</span><span class="o">.</span><span class="na">compute</span><span class="o">(</span><span class="n">r</span><span class="o">).</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="n">MyResult</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyResult</span><span class="o">();</span>
</span><span class='line'>                <span class="n">r</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">&quot;EXCEPTION&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">MyResult</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">TextView</span> <span class="n">t</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, there are quite some things going on. We include the web client ID as static field (<code>WEB_CLIENT_ID</code>). Note that it&rsquo;s the same value we got from the cloud console.</p>

<p>The <code>onCreate</code> method is called for every Android screen. We do several things. First, we create a <code>GoogleAccountCredential</code> object and we call the Android account picker. Our app will always call the account picker. A better behavior would only do it once but it&rsquo;s fine for our purposes. Then, we create an object that represents the API of our back-end. Finally, we set a callback on the button&rsquo;s click. We must use an asynchronous task as doing anything complex in the main (UI) thread is highly discouraged in Android.</p>

<p>The <code>DoSomethingAsync</code> task does the actual invocation of the back-end endpoint. I suggest to read Android docs to better understand life-cycles of objects and standard ways of doing things.</p>

<p>That&rsquo;s it! Now, run the app. You&rsquo;ll be presented with an account picker first. Either enter existing account details or create a new one (for tests). Then, click that button and get that authenticated response from the back-end!</p>

<h2>Congratulations!</h2>

<p>Congrats! You now have the whole development stack running on your machine. You can continue experimenting by adding new endpoints to your back-end and building the Android app. As a next step try deploying your code to AppEngine and make the Android emulator talk to it instead!</p>

<p>P.S. I have deleted all mentioned projects and IDs from the console after finishing this tutorial.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a FreeNAS computer]]></title>
    <link href="http://drseergio.github.io/blog/2013/08/28/impressions-from-freenas/"/>
    <updated>2013-08-28T13:49:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/08/28/impressions-from-freenas</id>
    <content type="html"><![CDATA[<p>I have always fancied the idea of having a dedicated storage system to keep personal data and backups. For the last 3 years I have been happily using an off-the-shelf solution &ndash; acer easyStore H340.</p>

<p><a href="http://drseergio.github.io/images/freenas/acer.jpg"><img class="right" src="http://drseergio.github.io/images/freenas/acer.jpg" width="200"></a></p>

<p><a href="http://www.trustedreviews.com/Acer-easyStore-H340-2TB_Peripheral_review">Acer H340</a> has 4 hot-swappable SATA slots, occupies little space and looks well. The on-board Atom N230 CPU is not powerful but has low TDP (4W). I have replaced the stock fan with a quieter one and the stock PSU with a passive one to make the server quieter.</p>

<p>In terms of software I had installed gentoo Linux with tons of different packages: file-sharing through NFS/CIFS, DNS server, OpenVPN, Bittorrent sync, transmission-web, BackupPC, various proxies and even Pandora ripper! I&rsquo;ve run a RAID5 on 3 disks using mdadm and used the 4th drive for backups.</p>

<p>But recently I&rsquo;ve decided to switch to a custom-built solution:</p>

<p><a href="http://drseergio.github.io/images/freenas/7.jpg"><img src="http://drseergio.github.io/images/freenas/7.jpg" width="450"></a></p>

<p> <!-- more --></p>

<h2>Why change?</h2>

<ul>
<li><p>it&rsquo;s mostly an irrational desire to upgrade and build something</p></li>
<li><p>in the hot summer time the Acer started to overheat. The symptoms were seemingly failed drives but as later SMART tests confirmed the drives were alright. Likely the SATA controller was going crazy because of heat and caused software RAID crashes.</p></li>
<li><p>to overcome heating issues I have tried to spin the fan faster which apparently solved the heat problem but introduced intolerable noise. Since I keep the server running 24x7 in the living room excessive noise is not acceptable.</p></li>
<li><p>I had spare computer parts available. I had a PSU, RAM and 6 2TB hard disks (4 of which were installed in Acer) and a 60GB SSD.</p></li>
<li><p>I wanted a solution which would minimize software maintenance. Although you can argue that it&rsquo;s possible to keep gentoo running without upgrading it I couldn&rsquo;t keep updates too far behind. Once in a while I broke things and compiling is not particularly fast on slow hardware, not too mention the hassle of connecting a monitor when the kernel does not boot.</p></li>
</ul>


<h2>Alternatives</h2>

<p><a href="http://drseergio.github.io/images/freenas/qnap.jpg"><img class="right" src="http://drseergio.github.io/images/freenas/qnap.jpg" width="200"></a></p>

<p>My initial idea was to purchase a used QNAP. QNAP looks nice and require absolutely no fiddling with the internals. After diving into classifieds I have realized that the price of even a used one is much higher than assembling something custom. I could not find any offers for 4-bay models lower than approximately 350$. Not only QNAP is expensive but the read/write performance is worse than reported by users of custom NASes.</p>

<p>Luckily, I have stumbled upon <a href="http://www.freenas.org">FreeNAS</a>! FreeNAS is a FreeBSD distribution intended for running NAS servers. FreeNAS provides a friendly yet functional <a href="http://www.freenas.org/about/screenshot.html">web-interface</a> for managing most of its aspects so once it&rsquo;s up and running it should be no harder to manage than a QNAP.</p>

<h2>Hardware</h2>

<p>The next step was to decide on hardware and components. As it turns out, there are a few things to keep in mind. For one, FreeNAS has ZFS file-system available which is very flexible and reliable but requires lots of RAM. 8GB is the absolute minimum.</p>

<p>In the end I have settled on the following hardware:</p>

<ul>
<li><p>Fractal Node 304 miniITX case. The case has space for 6 3.5&#8221; hard drives. The case itself is nicely polished and the design is minimalistic. The build quality is very high. The only down-side is that drives are not hot-swappable so you would need to open the case to remove a failed drive.</p></li>
<li><p>6 2TB Western Digital Caviar Green hard drives. Not very high grade but replacing them with better ones would be prohibitively expensive at this point.</p></li>
<li><p>ASRock E350M-1 motherboard with CPU and GPU on-board, max 16GB memory, 4 SATA connectors, 1GBit Realtek. It is not easy to find a miniITX board which fits all requirements (6 SATA, >8GB RAM, Intel network adapter, low power consumption, reasonably priced) so I had to compromise. This board is inexpensive and draws little power (18W CPU TDP) but has not enough SATA ports and is of consumer grade. Since I&rsquo;m building this for home use I believe the trade-offs are fine.</p></li>
<li><p>LSI MegaRAID SAS 9240-4i SATA controller. This is probably the most expensive part. Luckily, I could get a used one from a colleague. This gives me a total of 8 SATA ports (4 on the board + 4 on the controller).</p></li>
<li><p>2x8GB Kingston RAM. Maxed out the motherboard. Also, I could not find a miniITX board that supports more than 16GB.</p></li>
<li><p>16GB external flash drive for the FreeNAS distribution. That&rsquo;s the way FreeNAS is usually run &ndash; you write the image to a USB drive and boot off of it. Most of FreeNAS is kept in RAM while it&rsquo;s running. There&rsquo;s no need to waste a SATA port. Also, after you back-up FreeNAS configuration it&rsquo;s easier to replace the O/S should anything go wrong &ndash; just plug in another USB drive.</p></li>
<li><p>60GB corsair SSD (had one lying around). Used it for running jails and custom software &ndash; sort of like virtualization in FreeBSD world. I was familiar with lxc (Linux containers) so the concept is a familiar one.</p></li>
<li><p>Seasonic 400W passively-cooled PSU. I&rsquo;m a big fan of Seasonic PSUs. All computers in my household use Seasonic PSUs. 400W is a bit of an overkill for the purpose of NAS but I had one lying around with no use.</p></li>
</ul>


<h2>Assembled view</h2>

<p>This is how the assembled NAS looks like:</p>

<p><a href="http://drseergio.github.io/images/freenas/2.jpg"><img src="http://drseergio.github.io/images/freenas/2.jpg" width="160"></a>
<a href="http://drseergio.github.io/images/freenas/3.jpg"><img src="http://drseergio.github.io/images/freenas/3.jpg" width="160"></a>
<a href="http://drseergio.github.io/images/freenas/4.jpg"><img src="http://drseergio.github.io/images/freenas/4.jpg" width="160"></a>
<a href="http://drseergio.github.io/images/freenas/6.jpg"><img src="http://drseergio.github.io/images/freenas/6.jpg" width="160"></a></p>

<p>I have removed the stock fan from the motherboard and instead put a 120mm fan attached by 2-sided sticky tape to the PSU so that the fan sits on top of the CPU heat-sink. The fan spins slowly and hardly makes any noise. The built-in case fans have adjustable speed. I run them at lowest speed and the system/drive temperatures are much lower than in Acer. I believe that&rsquo;s because the airflow is much better and there&rsquo;s more space between the drives.</p>

<p>The NAS looks discrete in the living room and fits with the rest of the interior:</p>

<p><a href="http://drseergio.github.io/images/freenas/8.jpg"><img src="http://drseergio.github.io/images/freenas/8.jpg" width="300"></a></p>

<h2>FreeNAS impressions</h2>

<p>I have never worked with FreeBSD before. Getting up to speed is not difficult and the available documentation covers everything I have needed. Specifically, the handbooks are worth to read through if you&rsquo;re just starting out:</p>

<ul>
<li><p>FreeBSD handbook <a href="http://www.freebsd.org/handbook">http://www.freebsd.org/handbook</a></p></li>
<li><p>FreeNAS handbook <a href="http://doc.freenas.org/">http://doc.freenas.org/</a></p></li>
</ul>


<h3>Setup</h3>

<p>Initial setup has been very quick. I&rsquo;ve used a monitor and a keyboard to set-up the IP address. For the rest I&rsquo;ve relied on the UI.</p>

<p>A huge advantage of FreeNAS is the ZFS file-system. ZFS is reliable, flexible and functional. The features I&rsquo;ve been most impressed with are: snapshots, pools (that obliterate need for RAID) and deduplication.</p>

<p>I&rsquo;ve configured a so-called RAID-Z2 on 6 drives which is similar to a RAID6. This leaves usable space of 4 drives and allows failure of 2 drives.</p>

<p>One of the challenges I have faced is moving data from the previous NAS. Luckily, all of my data has fit on a single 2TB drive. I&rsquo;ve taken the following strategy:</p>

<ol>
<li><p>copy all of my data to a single drive</p></li>
<li><p>using CLI initialize a 6-drive RAID-Z2 with a virtual drive</p></li>
<li><p>fail the virtual drive</p></li>
<li><p>transfer files from the drive containing data to the new array</p></li>
<li><p>format the drive with data and put it into the array</p></li>
<li><p>import the array into FreeNAS UI</p></li>
</ol>


<p>The article that I&rsquo;ve relied on is available at <a href="http://forums.freenas.org/threads/quick-and-dirty-creating-a-degraded-raidz-3-of-4-drives-i-e-to-allow-migration.7748/#post-31106">http://forums.freenas.org/threads/quick-and-dirty-creating-a-degraded-raidz-3-of-4-drives-i-e-to-allow-migration.7748/#post-31106</a>.</p>

<h3>Software</h3>

<p>Once I&rsquo;d completed the install I&rsquo;ve configured NFS, CIFS, AFP (for talking with Apple computers) and set user rights. Setting this up was a breeze!</p>

<p>Then I&rsquo;ve configured backup for all computers in my home network. I&rsquo;ve used scheduled rsync + ZFS snapshots to backup Linux computers. For Apple machines I rely on Time Machine using AFP-shared volume. On Windows 8 I use File History with a iSCSI drive.</p>

<p>Finally, I needed to run custom applications. As it turns out, it&rsquo;s really easy to setup in FreeNAS. First, you create so-called jails which are basically virtual environments that appear as separate computers. Jails can have their own IP addresses. Inside of the jail you can install software using ports or any way you want. I&rsquo;ve created a jail for running bind DNS server, Bittorrent sync. I&rsquo;ve also installed midnight commander to move files around the NAS locally.</p>

<h3>Conclusions</h3>

<p>All in all, I&rsquo;m a very satisfied user of FreeNAS. So far the server has been running for 11 days and I had no issues whatsoever. I expect the machine to continue running without requiring any maintenance or updates. The only change I intend is to install additional services, like OpenVPN and git repositories.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing preview glass on Canon 500D]]></title>
    <link href="http://drseergio.github.io/blog/2013/07/10/replacing-preview-glass-on-canon-500d/"/>
    <updated>2013-07-10T18:41:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/07/10/replacing-preview-glass-on-canon-500d</id>
    <content type="html"><![CDATA[<p>Material things break all the time &ndash; one slightly wrong move and your beloved possession is cracked, damaged or shattered. My camera is no exception. Another SLR has slipped from a hand of my friend and landed on the corner of the preview screen of my Canon 500D causing an ugly crack:</p>

<p><img src="http://drseergio.github.io/images/canonrepair/01.jpg"></p>

<p>Many folks like to buy new things whenever old ones break or pay a lot for repair. I prefer to fix as much as I can myself. It&rsquo;s fun and very much in-line with the growing stoic inside of me.</p>

<p>Is it possible to fix this problem yourself?</p>

<!-- more -->


<p>Certainly. And the process is not complicated. All you need is a couple of household tools and the actual replacement screen which you can order from eBay.</p>

<h2>Tools and supplies that I have used</h2>

<p>I expect you already have a hair dryer and something sharp (like a knife or a blade). Here&rsquo;s what I have used:</p>

<p> Leatherman Wave knife</p>

<p> <a href="http://drseergio.github.io/images/canonrepair/05.jpg"><img src="http://drseergio.github.io/images/canonrepair/05.jpg" width="150"></a></p>

<p> Remington hair dryer</p>

<p> <a href="http://drseergio.github.io/images/canonrepair/04.jpg"><img src="http://drseergio.github.io/images/canonrepair/04.jpg" width="150"></a></p>

<p>We will also need a small suction cup with a handle/head. I did not have any so I had to order one through eBay. I have paid 12$ (with shipping to Switzerland) for a set of 6 (size 1.5 inches). 6 is the smallest quantity I found. You can search for &ldquo;suctioncups4u&rdquo; on eBay to find the seller.</p>

<p><a href="http://drseergio.github.io/images/canonrepair/03.jpg"><img src="http://drseergio.github.io/images/canonrepair/03.jpg" width="150"></a></p>

<p>A replacement glass can be found on eBay too. Search for &ldquo;500D outer screen window glass cover&rdquo;. I have paid 12$ (with shipping).</p>

<p> <a href="http://drseergio.github.io/images/canonrepair/02.jpg"><img src="http://drseergio.github.io/images/canonrepair/02.jpg" width="150"></a></p>

<h2>Step-by-step instructions</h2>

<ol>
<li><p>Heat up the sides of the preview glass for about 10-40 seconds on each edge to weaken the glue that holds the glass.
<img src="http://drseergio.github.io/images/canonrepair/06.jpg"></p></li>
<li><p>Carefully slide a sharp knife or blade underneath the glass and slowly push it along the side.
<img src="http://drseergio.github.io/images/canonrepair/07.jpg"></p></li>
<li><p>Put the suction cup on the glass and pull gently:
<img src="http://drseergio.github.io/images/canonrepair/08.jpg"></p></li>
<li><p>Remove the broken glass:
<img src="http://drseergio.github.io/images/canonrepair/09.jpg"></p></li>
<li><p>Remove residue glue:
<img src="http://drseergio.github.io/images/canonrepair/10.jpg">
<img src="http://drseergio.github.io/images/canonrepair/11.jpg"></p></li>
<li><p>Take off the protective paper from the replacement glass:
<img src="http://drseergio.github.io/images/canonrepair/12.jpg"></p></li>
<li><p>Carefully drop the new glass. Note that it&rsquo;s not symmetrical so if it does not immediately fit rotate the glass by 180 degrees.
<img src="http://drseergio.github.io/images/canonrepair/13.jpg"></p></li>
</ol>


<p>Camera fixed! Total cost of materials is 24$. The whole process took about 10 minutes. The same instructions apply equally well to some other SLRs. A YouTube video I found for Canon 5D confirms this: <a href="http://www.youtube.com/watch?v=OYBXkqvayqc">Replacing a scratched LCD cover on a Canon EOS 5D SLR</a></p>

<p>With the camera fixed I am off to the next adventure. Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fruitcoins.com: on complexity and solutions to wrong problems]]></title>
    <link href="http://drseergio.github.io/blog/2013/06/02/fruitcoins-dot-com-on-complexity-and-solutions-to-the-wrong-problem/"/>
    <updated>2013-06-02T13:59:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/06/02/fruitcoins-dot-com-on-complexity-and-solutions-to-the-wrong-problem</id>
    <content type="html"><![CDATA[<p>About two years ago I had very little experience in programming in Python. I&rsquo;ve heard of Django and felt excited how flexible it is and how complicated web applications can be elegantly written.</p>

<p>Tracking expenses has always been important for me. At the time I&rsquo;ve relied on KMyMoney program. Frankly, I did not (and still don&rsquo;t) like any such programs. They&rsquo;re either clunky and look like Windows 95 or too complicated or too inefficient. I&rsquo;ve decided to write my own web application in Python using the Django framework.</p>

<!-- more -->


<p>Initially, the program was called &ldquo;moneypit&rdquo; and I was planning to scale it infinitely (for millions of users that would flock to it!). I targeted AppEngine and made sure that I&rsquo;m not using any Django constructs that would not work on the AppEngine data store. I chose ExtJS 3 as a front-end solution because it had lots of ready components that can interact in well defined ways.</p>

<p>Once the first prototype was ready I&rsquo;ve decided that over-engineering (especially too early) the thing is pointless so I gave up on AppEngine. I&rsquo;ve rewritten everything from scratch and based the front-end on then new ExtJS 4. I&rsquo;ve relied on ExtJS&rsquo;s MVC pattern and made the back-end work in a RESTful fashion using django-piston.</p>

<p>fruitcoins.com is my first experience of using my own product. I made sure fruitcoins.com satisfies my needs: easy too use, efficient, does not stand in the way. I also wrote a fully-functional importer/exporter for KMyMoney format so that I can migrate easily.</p>

<p>fruitcoins.com is an assembly of following pieces: django framework, celery/rabbitmq queue for asynchronous tasks, REST API through django-piston, MVC ExtJS 4 front-end, MVC Sencha mobile front-end, OAuth integration, PhoneGap client for iOS (though never released), fabric deployment and so on.</p>

<p>A public instance is still available though I plan to shut it down soon because nobody using it except for me. I have a private &ldquo;beta&rdquo; instance running at home all to myself.</p>

<p>Some screen-shots of fruitcoins.com:</p>

<p><a href="http://drseergio.github.io/images/fruitcoins-login.png"><img src="http://drseergio.github.io/images/fruitcoins-login.png" width="150"></a> <a href="http://drseergio.github.io/images/fruitcoins-account-view.png"><img src="http://drseergio.github.io/images/fruitcoins-account-view.png" width="150"></a> <a href="http://drseergio.github.io/images/fruitcoins-categories.png"><img src="http://drseergio.github.io/images/fruitcoins-categories.png" width="150"></a> <a href="http://drseergio.github.io/images/fruitcoins-categories1.png"><img src="http://drseergio.github.io/images/fruitcoins-categories1.png" width="150"></a> <a href="http://drseergio.github.io/images/fruitcoins-expenses_graph.png"><img src="http://drseergio.github.io/images/fruitcoins-expenses_graph.png" width="150"></a></p>

<p>Why did I write all this? For one, I&rsquo;m going to upload complete fruitcoins.com source code to github. Hopefully someone will find it useful or at least will find code samples for doing things in Django and ExtJS. Example code is terrific for learning.</p>

<p>Recently, I&rsquo;ve decided that I should finally implement support for tracking investments in fruitcoins.com because I&rsquo;d like to have an overview of wealth in one spot. With that I went to clone the repository and get working. What surprised me is the complexity of the whole thing. For 2 years I&rsquo;ve been happily using fruitcoins.com and I forgot that it&rsquo;s actually 3 or 4 different programs tied together. There&rsquo;s the back-end, then there&rsquo;s the REST API, main front-end written in ExtJS and a mobile one in Sencha mobile! Basically, 4 different programs written in different languages/frameworks.</p>

<p>My initial reaction was disbelief. I could not believe I have written all that. I don&rsquo;t work with any of the frameworks in my day-to-day work. Seeing what&rsquo;s inside reminded me of ExtJS complexity, numerous parameters and widgets. I think if I have continued with ExtJS or Django I could have become a decent programmer for ExtJS/Django. But that does not matter because I don&rsquo;t personally like the idea of being narrowly specialized in one framework.</p>

<p>To play with the code I had to build a new development environment. I had to go through a long list of dependencies to get the thing running (nginx, mysql, uwsgi&hellip;). Several hours into this task I realized something important.</p>

<p><em>I&rsquo;m looking at the wrong problem</em>. I&rsquo;m thinking like a programmer too much. There&rsquo;s a simpler solution to my problem. I&rsquo;ve been substituting one problem with another. The original problem was to track my wealth and keep my expenses in order. Instead, I&rsquo;ve substituted it with &ldquo;need to have investments support in fruitcoins.com&rdquo;. I found a solution but far from the simplest one. Perhaps, a technical solution is not even needed here.</p>

<p>I&rsquo;ve then paused and reflected. Writing &ldquo;fruitcoins.com&rdquo; has been a great learning experience. I have included learning in the the utility of the project when commencing. I have not developed fruitcoins.com because its improvements over alternatives correspond to the spent effort. By all means, it&rsquo;s an irrational undertaking. And right now, the future utility does not include learning. What I need a simplest solution to my problem. Developing fruitcoins.com might be fulfilling in some ways but in reality it&rsquo;s a sunk-cost effort.</p>

<p>The very moment I realized this I stopped working on it. I have decided to rely on the platform of the investment bank to know where I stand with open positions. Furthermore, I re-evaluated the utility of keeping track of expenses the way I do right now. I seriously consider changing it to something like <a href="http://www.youneedabudget.com/">YNAB</a>.</p>

<p>In any case, if you&rsquo;re interested have a look in the fruitcoins.com github repository.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing qeytaks: trivial photo tag editor]]></title>
    <link href="http://drseergio.github.io/blog/2013/06/02/introducing-qeytaks-trivial-photo-tag-editor/"/>
    <updated>2013-06-02T10:38:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/06/02/introducing-qeytaks-trivial-photo-tag-editor</id>
    <content type="html"><![CDATA[<p>In the previous post I have introduced <strong>photofs</strong> &ndash; a tool I have written for myself that universally solves my photo management problems.</p>

<p>With <strong>photofs</strong> I can easily locate photos by albums, tags, dates. But how would I add the tags in the first place? I use Adobe Lightroom and absolutely love it! I don&rsquo;t use it to manage photos. Lightroom is a gateway from the camera to my collection. Once I&rsquo;m done processing photos Lightroom kisses them goodbye.</p>

<!-- more -->


<p>What if I mislabel something? For example, I typically use album names with the following template: &ldquo;YYYY.MM.DD &ndash; &lt;album name or event name or something descriptive&gt;&rdquo;. I could easily make a typo or choose a wrong year. Or what if I want to add an additional tag to some of the pictures?</p>

<p>Originally, with <strong>photofs</strong> I would need to somehow magically figure out what are the true paths to the files I want to alter. Then I would need to use a tool such as exiv2 to make the changes.</p>

<p>I immediately realized that this is not a work-able solution. So instead, I&rsquo;ve added support of modifying files through the virtual view. In other words, if you edit a file that you have opened through <strong>photofs</strong> the changes will be transparently channeled to the original images.</p>

<p>Furthermore, I had to implement a hack to let exiv2 library work (exiv2 is the only widely supported and maintained library for altering image photo data I could find). When a file is sufficiently large, exiv2 library wants to write its changes to a temporary file in the same folder as original and then rename it. Obviously, this cannot &ldquo;just work&rdquo; in a virtual folder so I had to implement a mechanism that tricks exiv2 into believing that a temporary file has been opened. In reality, <strong>photofs</strong> opens a file in memory and lets exiv2 write into it. When exiv2 tries to do a rename operation <strong>photofs</strong> dumps the file in memory to the original image.</p>

<p><img class="left" src="http://drseergio.github.io/images/qeytaks.png" width="400"> Back to our problem. So now we have a possibility to not only view photos in some virtual arrangements but also modify photos. In other words, it&rsquo;s now possible to locate all photos with tag &ldquo;travel&rdquo;, modify them (say, by adding tag &ldquo;fun&rdquo;) and expect the original photos to have a new tag &ldquo;fun&rdquo;!</p>

<p>That&rsquo;s great but what to use for editing tags? I&rsquo;ve mentioned in my last post that I am using XMP label tag as a marker for album names. I&rsquo;m almost certain nobody else is using it in the same way. I also don&rsquo;t want to use overly complex and ugly programs for changing just 2 things.</p>

<p>I&rsquo;ve decided to write my own simple tool &ndash; meet <strong>qeytaks</strong>. Essentially, <strong>qeytaks</strong> is a pane of pictures, 2 fields and a &ldquo;Save&rdquo; button. With <strong>qeytaks</strong> I can add new tags and alter existing ones. <strong>qeytaks</strong> indicates when a tag is not common to all selected pictures with a pre-pended star (*) similarly to how Lightroom does it. I&rsquo;ve added integration with KDE by creating a contextual right-click menu entry. When I am browsing photos through <strong>photofs</strong> view I can simply select some photos and open them in <strong>qeytaks</strong> for editing tags.</p>

<p><strong>qeytaks</strong> is written in Python and uses PyQt4 to create the UI. I&rsquo;ve never worked with Qt before so I had to learn its concepts first. I&rsquo;ve got an impression that the Qt concepts (at least the UI part, Qt library includes a lot more than just UI) are very similar to other desktop UI frameworks (e.g. events handling).</p>

<p>Again, I solved a personal problem and I am very happy with the result. I&rsquo;ve spent total of about a day working on it and learned a couple of things along the way. You can clone the github repository if you&rsquo;re interested. I&rsquo;ve documented the requirements and instructions in the README file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing photofs: FUSE file-system for browsing photos]]></title>
    <link href="http://drseergio.github.io/blog/2013/06/02/introducing-photofs-fuse-file-system-for-browsing-photos/"/>
    <updated>2013-06-02T09:21:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/06/02/introducing-photofs-fuse-file-system-for-browsing-photos</id>
    <content type="html"><![CDATA[<p>With yeach passing year the number of photos in my collection is growing. The trend only hockey-sticked once I got my own camera. I&rsquo;ve tried various programs to organize and browse photos. I recall using or trying ACDSee, digiKam, Adobe Bridge, IrfanView, F-Spot, Shotwell and possibly others that I don&rsquo;t recall.</p>

<!-- more -->


<p>The thing I don&rsquo;t like about these tools is that they build an index of photos in their proprietary formats. Usually, it takes a while to generate the index and the programs will obviously work only on the computer where the program is installed.</p>

<p>The other problem is performance. With 15 000+ photos many of the photo organizers simply don&rsquo;t work well: become slow, crash and hang. Applying changes to many photos at a time is especially thorny.</p>

<p>Finally, I like to have photos to be neatly organized not only in the indexes inside of the photo management programs but also on disk. It&rsquo;s quite possible that I will switch to another program in future (or to another operating system altogether). Having a manageable folder structure is crucial. Otherwise, I need to go through re-organizing all photos every time this happens.</p>

<p>My first attempt of solving this issue was to write a simple desktop program that imports photographs and sorts them nicely on disk in a well-defined folder structure. This is convenient because I can browse the collection on any computer running any operating system.</p>

<p>However, I quickly realized that there is not a single definitive way of arrangement that would be useful in all occasions. Sometimes, I want to look at pictures taken in certain years. Most of the time I really care about albums. I also like the idea of tags. It&rsquo;s obvious that a static arrangement won&rsquo;t answer all useful queries.</p>

<p>Couple of weeks ago an idea struck me. Why not to create a virtual file-system that would take meta-data information from the photos (dates, tags, album names, camera settings) and create a hierarchy that would be transparent to the operating system. You would simply browse a folder with your favorite file manager or photo viewer and photos would be neatly organized in various ways. Furthermore, if you store photos on a NAS you could run the virtual file-system on it and the view would be exposed to all clients of the NAS.</p>

<p>And that&rsquo;s exactly what I have done in <strong>photofs</strong> project. Simply put, <strong>photofs</strong> takes a path to folder with your photos and creates a set of virtual views of the photos at a specified mount point. Internally, it creates an index similarly to how the other photo management tools do it. The advantage, however, is that in the end you seemingly get a regular folder with files in it. You can browse photos using a terminal, any file-manager or even expose the view via network to other computers.</p>

<p>Here&rsquo;s a screen-shot of Dolphin file-manager showing 4 panels with the modes that <strong>photofs</strong> supports:</p>

<p><img src="http://drseergio.github.io/images/photofs.png"></p>

<p>Upon first invocation <strong>photofs</strong> generates an index and creates 4 virtual sub-folders at the mount point. Each of the sub-folders, in turn, exposes a single view of your photos:</p>

<ul>
<li><strong>albums</strong> lists all albums in your photo collection as folders. To determine what album a photo belongs to <strong>photofs</strong> reads XMP label. This is what I have decided to use as an album marker. Each album sub-folder has a <em>selects</em> sub-folder. That is intended for separating really good pictures from the rest. A picture is deemed as <em>select</em> if it has IPTC keyword &ldquo;select&rdquo; (IPTC is what almost all photo management tools use for storing tags in photos).</li>
<li><strong>date</strong> creates a hierarchy of date information: YYYY/MM/DD. At each level you can view all photos for that period by going into <em>all</em> sub-folder (e.g. all photos for year 2012).</li>
<li><strong>camera</strong> creates a hierarchy based on camera settings that had been used when a photo has been taken. For example, you could find photos taken at 2.8F on a 55mm using Canon camera with this view.</li>
<li><strong>tags</strong> exposes a tag view. You can choose photos based on intersection of tags. For example, to find photos that have tags &ldquo;milan&rdquo; and &ldquo;racing&rdquo; you would go into sub-folder milan/racing.</li>
</ul>


<p><strong>photofs</strong> is written in Python and runs on Linux only because it relies on inotify kernel feature of Linux to know when certain files have changed without doing full traversals of the photo folder. The core of <strong>photofs</strong> is built on top of FUSE &ndash; a Linux kernel feature that allows user-land programs to act as file-systems. I believe <strong>photofs</strong> could be adapted to OSX by using an alternative to inotify (not sure what that is in OSX). The index is stored as a sqlite database.</p>

<p>You can argue that what I have done with <strong>photofs</strong> is yet another program that runs on one O/S only and also has a proprietary index. However, I believe it&rsquo;s different because <strong>photofs</strong> exposes a file-system. At home, I expose a virtual <strong>photofs</strong> view via NFS and Samba to other computers and it works well enough.</p>

<p> <strong>photofs</strong> is not perfect. First and foremost, it solves a problem I personally had. If you believe you can make use of it or even improve it &ndash; go ahead and clone the github repository. Requirements and installations steps are documented in the README file.</p>
]]></content>
  </entry>
  
</feed>
