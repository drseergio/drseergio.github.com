<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Sergey Pisarenko]]></title>
  <link href="http://drseergio.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://drseergio.github.io/"/>
  <updated>2014-03-01T07:50:17+00:00</updated>
  <id>http://drseergio.github.io/</id>
  <author>
    <name><![CDATA[Sergey Pisarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 sold gadgets later or welcome back to Microsoft Windows]]></title>
    <link href="http://drseergio.github.io/blog/2013/10/21/5-sold-gadgets-later-or-welcome-back-to-microsoft-windows/"/>
    <updated>2013-10-21T20:31:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/10/21/5-sold-gadgets-later-or-welcome-back-to-microsoft-windows</id>
    <content type="html"><![CDATA[<p>I honestly would not anticipate writing about Microsoft Windows. Not after I have irrevocably and irreversibly switched to Linux and OSX years ago when I was studying at the university.</p>

<p>But here I am, happily typing this in Sublime2 editor on my desktop computer running nothing else but Microsoft Windows 8. Yes, the same computer that had been running Gentoo Linux a week or so ago!</p>

<!-- more -->


<p>Long story short I&rsquo;ve never intended this to happen. My goal was to reduce number of gadgets. Instead of a full-size tower PC and an Apple MacMini I wanted a single powerful machine running OSX. My idea was to buy a new motherboard with Thunderbolt ports (to connect two 27" Apple displays) and install OSX on to it. It&rsquo;s not an officially supported thing to do but I could not care less. The upcoming Apple MacPro is going to cost a fortune anyway and there is absolutely no way for me to justify such a steep price.</p>

<p><a href="/images/win8/3.jpg">{% img /images/win8/3_s.jpg 500 %}</a></p>

<p>As you probably expect things did not go according to plan. It turned out that the motherboard I have ordered includes a Thunderbolt controller (DSL4510/4410) that is not yet supported by OSX (not even the latest Mavericks version). That left any attempts to install OSX out in the cold.</p>

<p><a href="/images/win8/9.jpg">{% img /images/win8/9_s.jpg 500 %}</a></p>

<p>The reason I had an Apple computer in the first place was to natively run software that does not exist on Linux, such as Adobe imaging products. So I&rsquo;ve decided to install Windows and use all the same software on it. After all, the hardware I had put together has &ldquo;designed for Windows 8&rdquo; written all over it.</p>

<p>I was expecting a miserable experience. People love to bash Microsoft Windows and there are reasons for that. However, I found that the desktop experience works rather well and looks good. To be honest, I don&rsquo;t see much difference between operating systems for desktop work-loads because most of the time I use a web browser. Windows 8 does not stand in my way.</p>

<p>Every system has its quirks and Windows is no exception. I am used to quirks in all of the systems I have a pleasure to work with. The things I did not like about Windows:</p>

<ul>
<li><p>Installing drivers. In OSX almost everything is built-in. In Linux you either have a distribution with a binary kernel that includes support for almost every device or, if you&rsquo;re into it, you compile your own. Neither OSX nor Linux mandate messing with device support unless you really want to.</p></li>
<li><p>Updates. The dreadful updates plague OSX as well but not as much as Windows. I don&rsquo;t fully appreciate forced reboots and long installation times.</p></li>
<li><p>Lack of virtual desktops. Even with two 27" screens I like to have an option to switch to a different work-space. Both OSX and Linux have nailed this well. I&rsquo;ve found a program that enables virtual desktop but I don&rsquo;t know if it&rsquo;s doing its work efficiently. Perhaps I shouldn&rsquo;t care because the Intel i7 4740K is very fast and there&rsquo;s 16GB of system memory available.</p></li>
<li><p>Lack of good terminal. As a work-around I&rsquo;ve installed Console2 and Cygwin. It&rsquo;s an OK solution. I also SSH into a powerful Linux server (which acts as a <a href="/blog/2013/09/01/htpc-build-i-slash-m-proud-of/">HTPC</a> ) and keep a bunch of VMs around.</p></li>
<li><p>Sleep puts all windows on one monitor. In addition, the time is not immediately synced so I see the time when the computer was put to sleep.</p></li>
<li><p>Smaller behavior quirks that are solved by finding and installing utilities. For example:</p>

<ul>
<li>AltDrag to drag windows with a pointer while holding Alt pressed</li>
<li>AlwaysMouseWheel to scroll windows that are not in focus</li>
<li>TypeIt to enter German characters with a QWERTY layout</li>
<li>Dexpot for virtual desktops</li>
<li>ObjectDock for a OSX-like bar</li>
<li>ClipX as a clipboard history manager</li>
<li>NO, I do not need a &ldquo;start menu&rdquo; :D</li>
</ul>
</li>
</ul>


<p>The machine is exquisite! It&rsquo;s extremely quiet &ndash; it has only a single 120mm fan on the CPU heat-sink (I removed all the other fans). There are no extension cards and everything else is cooled passively. There&rsquo;s just one SSD and no vibrating hard disks. I can&rsquo;t tell if the computer is running or not! The Apple screens are gorgeous. I&rsquo;ve added a Logitech trackpad to do the touch gestures.</p>

<p><a href="/images/win8/4.jpg">{% img /images/win8/4_s.jpg 500 %}</a></p>

<p>While I believe OSX might eventually support the Thunderbolt controller I don&rsquo;t plan to switch. The desktop experience is great and all the software I need works well. I&rsquo;ve sold all the gadgets, computers and computer parts I wanted through a local online auction. I feel much better now!</p>

<p>Full hardware list:</p>

<ul>
<li>Antec 1200 case (with all fans either removed or disabled)</li>
<li>Asus Z87 deluxe/dual motherboard</li>
<li>Intel 4770K</li>
<li>Noctua NH-U12P SE2 cooler</li>
<li>2x8GB RAM</li>
<li>Apple Cinema Display 27"</li>
<li>Apple Thunderbolt Screen 27"</li>
<li>Advantage Kinesis keyboard</li>
<li>Logitech M570 trackball</li>
<li>Logitech T650 multi-touch trackpad</li>
<li>Seasonic 460W passively-cooled PSU</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My lucky night with a FreeNAS failure]]></title>
    <link href="http://drseergio.github.io/blog/2013/09/08/my-lucky-night-with-freenas-failure/"/>
    <updated>2013-09-08T01:34:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/09/08/my-lucky-night-with-freenas-failure</id>
    <content type="html"><![CDATA[<p>It&rsquo;s 1:35am right now and something really bad has happened about 4 hours ago. First, Time Machine on my Mac Mini complained that the backup network disk became inaccessible. Then network shares have stopped responding on all computers. This means something wrong has happened with the wonderful reliable NAS server that I had built weeks ago.</p>

<p>First, I connect to the server via SSH and start poking around. Once I notice that file-system commands, such as <code>ls</code>, cause sessions to hang I become worrisome. I do a reboot hoping that solves the problem. 10 minutes pass. The server does not start.</p>

<!-- more -->


<p>{% img right /images/chinese_monitor.jpg %}</p>

<p>Once I&rsquo;ve connected a handy <a href="http://dx.com/p/8-tft-lcd-car-reverse-rear-view-color-monitor-w-vga-bnc-cable-black-149114">8" VGA monitor</a> I noticed SCSI driver related problems in the kernel logs. As it turns out, the USB drive on which FreeNAS had been installed has failed. This monitor is really handy for troubleshooting problems with servers &ndash; small, easy to carry and occupies little space in the toolbox. The picture quality is god-awful but good enough for reading terminal output.</p>

<p>I have been expecting the worst &ndash; that I would need to re-configure everything. After a quick search on the Internet I found out that FreeNAS keeps configuration in a SQLite database file on the 4th partition in <code>freenas-v1.db</code> file. A bleak hope ran through my mind. I&rsquo;ve connected the flash disk to a Linux computer and started poking around. All I needed to do was to compile UFS file-system support in kernel and then mount the partition with:</p>

<p><code>mount -r -t ufs -o ufstype=44bsd /dev/sdc4 /tmp/mm</code></p>

<p>I copied the file over and verified that it&rsquo;s not corrupted. YES! I had been stupidly postponing back-up of the configuration file. If I had to re-configure FreeNAS from scratch I would feel like a fool and waste a week worth of evenings. Now, I just need to burn the FreeNAS image to a replacement drive and I&rsquo;m all set.</p>

<p>The last step took embarassingly long time. None of the images that I had written either on Linux or Mac would boot. FreeNAS would get to an error saying <code>corrupt or invalid GPT detected.</code>. No matter what I did the outcome was the same. The solution was to delete GPT by running parted from Linux and doing <code>mklabel msdos</code>, followed by write of the disk image. I believe this problem occurred because I had previously used the drives for experimentation with Chromebook and some GPT headers apparently remained there.</p>

<p>{% img left /images/msata.jpg %}</p>

<p>Finally, I found a spare mSATA SSD drive lying around with no use (a leftover from a notebook upgrade). I also had a mSATA adapter so I&rsquo;ve put them together inside of the NAS to use as a boot device for FreeNAS. Now the NAS has 8 SATA devices (6 HDDs and 2 SSDs) maxing out all available SATA ports in the system.</p>

<p>Once I have successfully booted the server and got to the web UI and initiated import of the recovered configuration database file. Then the server rebooted twice and everything was back!</p>

<p>The machine is back online and running beautifully. I now have a backup of the configuration. In case anything goes wrong again reinstalling FreeNAS is really quick &amp; simple IFF the backup configuration file is available. I am once again pleasantly surprised at how well FreeNAS is made.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating dynamic task scheduler on AppEngine]]></title>
    <link href="http://drseergio.github.io/blog/2013/09/03/creating-dynamic-task-scheduler-on-appengine/"/>
    <updated>2013-09-03T21:14:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/09/03/creating-dynamic-task-scheduler-on-appengine</id>
    <content type="html"><![CDATA[<p>{% img right /images/app-engine.png %}</p>

<p>I&rsquo;ve been working on a simple hobby project. The goal is to build an Android application which, as it turns out, requires a backend. The most important task of the backend is to perform certain things at specified times in future.</p>

<p>In this post I will explain how I&rsquo;ve designed a simple scheduler which relies on AppEngine cron, tasks and the datastore. We will make a new trivial AppEngine application that ties everything together. Although I normally prefer Python but I&rsquo;ve chosen Java for this project. I guess that&rsquo;s because I wanted some consistency with the Android counter-part that I&rsquo;m also developing.</p>

<!-- more -->


<h2>Why do we need scheduler in the first place?</h2>

<p>To implement the app that I&rsquo;m developing I must be able to send several notifications to selected users starting at a certain time within a specified interval. For example, send 5 notifications to user John with a 2 hour interval starting at 2pm. I believe such mechanism might be generally useful.</p>

<h2>Scheduler design</h2>

<p>My number one goal with the project I&rsquo;m working on is simplicity. I want to make it work. I want to learn few things. I want to end up with fewest lines of code possible. Projects can easily get out of scope and become too much to manage, especially when done out of curiosity and not with a commercial intent. This means scheduler must be as simple as possible and rely on as few parts as possible.</p>

<p>I propose to chiefly rely on the built-in AppEngine cron. Define a cron job that is executed every minute. In that cron job execute scheduled tasks. Each scheduled task has a <code>next_run_ts</code> parameter that specifies when is the next occurrence due. Whenever the cron is run it checks for all tasks that either have <code>next_run_ts</code> equal to current time or are already in the past. For every due scheduled task the cron job creates a background task to execute actual instructions.</p>

<p>The down-side of my design is that the scheduler is only accurate within couple of minutes. This is perfectly acceptable for my use-case.</p>

<h2>Create AppEngine project in Eclipse</h2>

<p>First things first, let&rsquo;s create a new AppEngine project to prototype our scheduler. I assume you have Eclipse installed and configured with Google plugin. If not, head over to a <a href="http://pisarenko.net/blog/2013/08/29/build-an-android-app-using-google-cloud-endpoints-with-oauth/">recent post I have written</a> and read the section about setting up ADT. You don&rsquo;t need ADT if you don&rsquo;t intend to write Android application but since I already have ADT there&rsquo;s no reason to mess with a separate Eclipse installation.</p>

<p>Create a new AppEngine project by clicking <code>File &gt; New &gt; Other... &gt; Google &gt; Web Application Project</code>. Choose any name you want (I&rsquo;ve chosen <code>Scheduler</code>) and specify the package name (I&rsquo;ve selected <code>net.pisarenko.backend.scheduler</code>). Untick <code>Use Google Web Toolkit</code> and <code>Generate project sample code</code> and press <code>Finish</code>.</p>

<h2>Create a test class to generate scheduled tasks</h2>

<p>In order to test our scheduler we must be able to create some tasks first. So our first goal is to create a handler which creates scheduled tasks. I&rsquo;ve called my test class <code>TestGenerator</code>:</p>

<p>{% codeblock TestGenerator.java lang:java %}
package net.pisarenko.backend.scheduler;</p>

<p>import java.io.IOException;
import java.util.logging.Logger;</p>

<p>import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;</p>

<p>import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;</p>

<p>@SuppressWarnings(&ldquo;serial&rdquo;)
public class TestGenerator extends HttpServlet {</p>

<pre><code>private static final Logger log = Logger.getLogger(TestGenerator.class.getName());
public static final String JOB_PARENT = "notification_job_parent";

public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    // set parent to ensure data consistency
    Key jobKey = KeyFactory.createKey("NotificationJob", JOB_PARENT);
    Entity job = new Entity("NotificationJob", jobKey);
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();

    job.setProperty("next_run_ts", System.currentTimeMillis() / 1000L + 10);
    job.setProperty("frequency", 10);
    job.setProperty("remaining", 5);

    datastore.put(job);

    log.severe("Created new job to run every 10 seconds 5 times");
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>All the code does is it creates a new AppEngine data-store entity of kind <code>NotificationJob</code> when a HTTP GET request is made to this handler. Notice that I use UNIX timestamp as the specification when to run the task. I also take precautions to ensure that written data is consistent by setting a non-existent parent to the saved entity. If you&rsquo;re not familiar with AppEngine&rsquo;s data-store I highly recommend reading about <a href="https://developers.google.com/appengine/docs/java/datastore/structuring_for_strong_consistency">eventual consistency</a> as AppEngine data-store is very different from RDBMS and you must have the right mindset when designing storage for your system.</p>

<p>The intent of the test scheduled task is to execute 6 times within 10 second interval and start in 10 seconds from the moment the handler is called.</p>

<p>Notice that I&rsquo;m using 10 second interval. As you remember, AppEngine cron executes once a minute. This means that the resolution of the cron is not sufficient for running our test task. AppEngine would likely execute all 6 occurrences at the same time. However, we will be using the development server and cron jobs are not executed automatically. We will be acting as a cron ourselves. I will manually access the test handler more often than every 10 seconds for testing purposes.</p>

<p>Let&rsquo;s register our handler at <code>/test</code> by modifying the <code>web.xml</code> file under <code>war/WEB-INF/</code> in the project structure:</p>

<p>{% codeblock web.xml %}
&hellip;</p>

<pre><code>&lt;servlet&gt;
    &lt;servlet-name&gt;test&lt;/servlet-name&gt;
    &lt;servlet-class&gt;net.pisarenko.backend.scheduler.TestGenerator&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;test&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/test&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>

<p>&hellip;
{% endcodeblock %}</p>

<p>For testing/development/debugging purposes I&rsquo;ve put a log statement. Let&rsquo;s try our generator. Run the project by pressing Ctrl+F11. By default, the development server starts at <code>http://127.0.0.1:8888</code> so our handler is accessible at <code>http://127.0.0.1:8888/test</code>.</p>

<p>Access the test handler and check the output of console in Eclipse. You should see something like this:</p>

<p>{% img /images/scheduler/console.png %}</p>

<p>Our test scheduled task has been saved! Now let&rsquo;s finish this off with the actual task handler.</p>

<h2>Configure cron and the scheduled task handler</h2>

<p>To run our scheduler loop every minute using AppEngine&rsquo;s cron we must create a <code>cron.xml</code> config file in <code>war/WEB-INF</code>:</p>

<p>{% codeblock cron.xml %}
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
<cronentries>
  <cron></p>

<pre><code>&lt;url&gt;/cron&lt;/url&gt;
&lt;description&gt;Send pending notifications&lt;/description&gt;
&lt;schedule&gt;every 1 minute&lt;/schedule&gt;
</code></pre>

<p>  </cron>
</cronentries>
{% endcodeblock %}</p>

<p>Effectively, this will execute <code>/cron</code> endpoint every minute. Note that development server will not run cron so we will manually trigger it through the browser by accessing <code>http://127.0.0.1:8888/cron</code>.</p>

<p>Now let&rsquo;s write the code behind the <code>/cron</code> endpoint. The code will check current time, retrieve all scheduled tasks which have next run either in the past or right now and execute them. If the task is supposed to be run several times we will reduce the remaining run counter, calculate the next execution time and save the changes. If the task has no more runs we delete the entity from the data-store:</p>

<p>{% codeblock NotificationScheduler.java lang:java %}
package net.pisarenko.backend.scheduler;</p>

<p>import java.io.IOException;
import java.util.logging.Logger;</p>

<p>import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;</p>

<p>import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.PreparedQuery;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Query.FilterPredicate;
import com.google.appengine.api.datastore.Query.FilterOperator;</p>

<p>import com.google.appengine.api.taskqueue.Queue;
import com.google.appengine.api.taskqueue.QueueFactory;
import static com.google.appengine.api.taskqueue.TaskOptions.Builder.*;</p>

<p>@SuppressWarnings(&ldquo;serial&rdquo;)
public class NotificationScheduler extends HttpServlet {</p>

<pre><code>private static final Logger log = Logger.getLogger(NotificationScheduler.class
        .getName());

public void doGet(HttpServletRequest req, HttpServletResponse resp)
        throws IOException {
    log.severe("Running cron loop");
    long currentTime = System.currentTimeMillis() / 1000L;
    log.severe("Current time: " + currentTime);

    DatastoreService datastore = DatastoreServiceFactory
            .getDatastoreService();
    Key jobKey = KeyFactory.createKey("NotificationJob",
            TestGenerator.JOB_PARENT);
    Query query = new Query("NotificationJob", jobKey)
            .setAncestor(jobKey)
            .setFilter(
                    new FilterPredicate("next_run_ts",
                            FilterOperator.LESS_THAN_OR_EQUAL, currentTime));
    PreparedQuery pq = datastore.prepare(query);

    for (Entity job : pq.asIterable()) {
        processJob(job);
    }
}

private void processJob(Entity job) {
    Queue queue = QueueFactory.getDefaultQueue();
    queue.add(withUrl("/sender").param("job_id", "job_id"));

    DatastoreService datastore = DatastoreServiceFactory
            .getDatastoreService();
    job.setProperty("remaining", ((Long) job.getProperty("remaining")) - 1);

    if ((Long)job.getProperty("remaining") == 0) {
        datastore.delete(job.getKey());
    } else {
        job.setProperty("next_run_ts",
            ((Long)job.getProperty("next_run_ts")) + ((Long)job.getProperty("frequency"))); 
        datastore.put(job);
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>The handler executes a query against the data-store to retrieve due scheduled tasks. Note that it uses ancestor query to ensure that return values are consistent. Then we iterate through retrieved scheduled tasks and execute <code>processJob</code> method. The <code>processJob</code> introduces AppEngine default queue which we use for executing our scheduled tasks in the background.</p>

<p>Update <code>web.xml</code> for the new handler:</p>

<p>{% codeblock web.xml %}
&hellip;</p>

<pre><code>&lt;servlet&gt;
    &lt;servlet-name&gt;cron&lt;/servlet-name&gt;
    &lt;servlet-class&gt;net.pisarenko.backend.scheduler.NotificationScheduler&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;cron&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/cron&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>

<p>&hellip;
{% endcodeblock %}</p>

<p>At this point the code won&rsquo;t work because the <code>processJob</code> method is creating queue tasks (not to confuse with our custom scheduled tasks) to be run in the background. Let&rsquo;s fix that!</p>

<h2>Use the default AppEngine queue for executing scheduled tasks</h2>

<p>AppEngine provides functionality to execute code in the background. The easiest way is to use the default push queue. Basically, you tell the default push queue what endpoint should handle the task and AppEngine will execute that endpoint in background. You can also provide parameters that will be populated as HTTP request parameters. No additional configuration is needed, simply instantiate the queue as in our test code.</p>

<p>In the code above we call endpoint <code>/sender</code> with parameter <code>job_id</code> whose value is always <code>job_id</code>. Obviously, this is not a very useful parameter as it stands. However, in future I will change this parameter to provide enough information to the background task handler to carry out execution of the task. For example, the parameter could provide a key to an entity that contains users which should be notified.</p>

<p>The code for the <code>/sender</code> handler:</p>

<p>{% codeblock NotificationSender.java lang:java %}
package net.pisarenko.backend.scheduler;</p>

<p>import java.io.IOException;
import java.util.logging.Logger;</p>

<p>import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;</p>

<p>@SuppressWarnings(&ldquo;serial&rdquo;)
public class NotificationSender extends HttpServlet {</p>

<pre><code>private static final Logger log = Logger.getLogger(NotificationSender.class.getName());

public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    log.severe("EXECUTING TASK FROM QUEUE " + req.getParameter("job_id"));
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>As you see, it does not do much but it provides the almighty log statement which we will use to confirm that our code is working as we want it to. Finally, update <code>web.xml</code> with <code>/sender</code>:</p>

<p>{% codeblock web.xml %}
&hellip;</p>

<pre><code>&lt;servlet&gt;
    &lt;servlet-name&gt;sender&lt;/servlet-name&gt;
    &lt;servlet-class&gt;net.pisarenko.backend.scheduler.NotificationSender&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;sender&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/sender&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>

<p>&hellip;
{% endcodeblock %}</p>

<h2>Final run</h2>

<p>Run the application from Eclipse and open your browser. First, access <code>http://127.0.0.1:8888/cron</code> and observe that <code>EXECUTING TASK FROM QUEUE job_id</code> is displayed in console output. By accessing <code>/cron</code> you&rsquo;re acting as a manual cron. Remember when we ran <code>/test</code>? Exactly, this is why our cron handler is now executing those long due tasks! Refresh the page several times to make sure that all 6 occurrences are run.</p>

<p>Then, run <code>/test</code> to create another test scheduled task and quickly access <code>/cron</code> handler again. If you refresh the browser window often enough you will observe that the scheduled task is executed only when 10 seconds have elapsed since the last execution. Sweet, our scheduler is working!</p>

<p>As a next step, experiment with the test generator and try the code in production AppEngine. As for myself, I&rsquo;m going to integrate this piece into the project I&rsquo;m working on. I prefer to build applications by prototyping separate pieces one at a time. This way I at least have an idea of what to expect from each comopnent and know how to integrate it into the bigger design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTPC build I'm proud of]]></title>
    <link href="http://drseergio.github.io/blog/2013/09/01/htpc-build-i-slash-m-proud-of/"/>
    <updated>2013-09-01T17:38:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/09/01/htpc-build-i-slash-m-proud-of</id>
    <content type="html"><![CDATA[<p>If you follow what I write here and on <a href="http://grow-slowly.com">http://grow-slowly.com</a> you will notice that I am somewhat obsessed with reducing the number of possessions in my life. This directly contradicts another, though negative, characteristic of mine &ndash; to get more gadgets and possessions.</p>

<p>Recently, I have had a lot of good progress on challenging the negative trait. Not only I&rsquo;ve been more successful on overcoming the purchasing obsession but I&rsquo;ve also found ways to enjoy more and get creative at reusing what I already have.</p>

<p>One of my recent projects was to combine several devices into one. I&rsquo;ve got rid of Sony Playstation 3 and merged 2 computers together. Here&rsquo;s the end-result:</p>

<p><a href="/images/htpc/2.jpg">{% img /images/htpc/2.jpg 500 %}</a></p>

<!-- more -->


<p>Just one neat-looking HTPC (home theater personal computer) that fits into the living room! Why did I have 3 devices in the first place? Well, I&rsquo;ve obviously used Sony Playstation 3 for playing games. I&rsquo;m not an obsessive gamer but I do enjoy certain games once in a while. I appreciate the fact that once you own a console no hardware upgrades are necessary. The down-side is that the graphics quality is lower than on PCs as the technology advances and the console stays the same.</p>

<p>Second, I had a server running gentoo Linux with relatively high computational power &ndash; modern i7 Intel processor, 32GB RAM and a pair of SSD drives. I&rsquo;ve used the machine for doing relatively-taxing statistical calculations, VMs and later ran a bittorrent downloader.</p>

<p>Third, I had an HTPC to watch movies and listen music. I don&rsquo;t like an idea of using an off-the-shelf media player. New formats get released every now and then and some videos are available online on certain sites only. Chances are that sooner or later there will be a video that the off-the-shelf box can&rsquo;t play. Having a full-blown PC has full flexibility as I can always install newer software or use a standard desktop browser to open any streaming site. Although I actively use XBMC for great viewing experience I&rsquo;ve intentionally left the full KDE desktop experience as I don&rsquo;t want to mask the functionality of a computer. By the way, the HTPC had been powered by an Asus E350 board (similar to what I currently use in <a href="http://pisarenko.net/blog/2013/08/28/impressions-from-freenas/">my NAS build</a>) and a passively cooled nVidia Geforce 610. Couple that together with a passive Seasonic power supply and you get a completely quiet computer!</p>

<p>I&rsquo;ve realized that I was wasting resources. I can play games on a PC (apart from few PS3 exclusives) so I don&rsquo;t really need a PS3. The server is already running 24x7 so why can&rsquo;t I use it as HTPC? With that idea in mind I&rsquo;ve decided to merge 2 computers together and sell the PS3 to a colleague.</p>

<p>I admit the conversion was far from frugal as I had to purchase a powerful graphics card to allow gaming. In addition, the cooling system I had in the server would not fit in the relatively compact Antec Fusion Remote case (Corsair H100). Finally, the power supply I had was not powerful enough.</p>

<p>The final spec list I arrived at:</p>

<ul>
<li><p>Antec Fusion Remote case (re-used from existing HTPC)</p></li>
<li><p>Asus ROG IV Gene mATX motherboard (re-used from the server)</p></li>
<li><p>Intel i7 i3930K CPU (re-used from the server)</p></li>
<li><p>32GB RAM (re-used from the server)</p></li>
<li><p>2x60GB Intel SSD (re-used from the server)</p></li>
<li><p>750W Seasonic X series PSU (bought)</p></li>
<li><p>1x60GB SSD (bought, for installing Windows 7 on it)</p></li>
<li><p>2xnVidia Zotac GeForce 660 in SLI mode (bought, to be able to play games)</p></li>
<li><p>Windows 7 license (bought, to be able to play games)</p></li>
<li><p>LG BluRay writer (bought, to install Windows and have at least 1 optical drive at home)</p></li>
<li><p>2x120mm NoiseBlocker case fans (re-used from the server)</p></li>
<li><p>Noctua NH-U12P SE2 CPU cooler (bought)</p></li>
</ul>


<p>The unused internals from the existing server and HTPC were either sold or given away to those who need them. Nothing was thrown away.</p>

<p>The final under-the-hood view of the build:</p>

<p><a href="/images/htpc/4.jpg">{% img /images/htpc/4.jpg 500 %}</a></p>

<p>I&rsquo;ve installed Windows 7 on a separate SSD. When I want to play games I have to reboot the machine into Windows 7. The down-side is that the server is temporarily unavailable. It&rsquo;s an acceptable solution for my purposes as I&rsquo;m the only user of the server and I don&rsquo;t actively need the server while I&rsquo;m playing. In addition, I play only a couple of hours every other week.</p>

<p>I have been a little worried that I would not be able to fit all the hardware in the case but everything got in surprisingly well. It&rsquo;s not possible to fit in a 7-generation nVidia as the new cards are considerably longer (ca 30 cm vs 19cm GeForce 660). I hope future GPU generations will reverse the trend.</p>

<p>Another concern is noise. I was pleasantly surprised that the end result is not loud. At least not when it&rsquo;s running as a server. It makes a lot of noise when I play but then the issue is not relevant as the sound from speakers is much louder. I can heartily recommend Zotac&rsquo;s graphics cards as they are quiet unless you&rsquo;re gaming. The 750W PSU from Seasonic is similar as it has a fan that turns on only under heavy load. The Noctua CPU cooler is also quiet.</p>

<p>Now I can play games, watch movies and perform computational tasks all from one machine. And most importantly it fits well within the interior:</p>

<p><a href="/images/htpc/3.jpg">{% img /images/htpc/3.jpg 300 %}</a> <a href="/images/htpc/1.jpg">{% img /images/htpc/1.jpg 300 %}</a></p>

<p>It is clear to me that in future this machine will get obsolete as newer games require faster hardware. This means that I&rsquo;ll likely need to upgrade graphics cards. The issue is that newer cards are also likely to be long so I&rsquo;ll need a different case. When that happens I have my eyes on Antec Fusion Remote Max. The &ldquo;Max&rdquo; version should have enough space.</p>

<p>I&rsquo;m glad I got rid of a few things. I wasn&rsquo;t very frugal at it but at least <a href="http://grow-slowly.com/2013/08/24/an-update-on-my-frugality-efforts/">I&rsquo;m getting better at it</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build an Android app using Google Cloud Endpoints and OAuth]]></title>
    <link href="http://drseergio.github.io/blog/2013/08/29/build-an-android-app-using-google-cloud-endpoints-with-oauth/"/>
    <updated>2013-08-29T13:20:00+00:00</updated>
    <id>http://drseergio.github.io/blog/2013/08/29/build-an-android-app-using-google-cloud-endpoints-with-oauth</id>
    <content type="html"><![CDATA[<p>Recently I came up with an idea for a mobile application. To be honest, it&rsquo;s more of an excuse to try my hand at writing Android applications and do something new. Since I had almost zero experience with Android I have started by reading the official Google guides and then doing some napkin grade designs of the application architecture.</p>

<p>Immediately I have realized that app requires a back-end as some of the things cannot be reliably performed on the handset itself. Lurking around I have learned about Google Cloud Endpoints lets you create a REST API that clients (be that iOS, Android or JavaScript) can access. Furthermore, my application needs to know who is talking to the back-end so authentication is a hard requirement.</p>

<p>{% img right /images/endpoints/endpoints.png %}</p>

<p>I don&rsquo;t know about you but personally my productivity is high only when I have a reliable development environment that provides immediate feedback. My first goal then was to create a local environment where I could prototype with Google APIs piece by piece and proceed with building the actual app.</p>

<p>It turned that there are many official pages and guides talking about Google Endpoints and the integration with Android. There is even a 1-click solution called the Mobile Backend Starter. My problem with such solutions is that I don&rsquo;t get a feel for what is being done for me so I prefer to start with the smallest amount of code possible and incrementally build on top of it.</p>

<p>In this article I will guide you through creating a trivial Android application that talks to a back-end powered by Google Cloud Endpoints. Ultimately, the back-end would run on AppEngine but my immediate goal is to provide you with a reliable local development environment where you could try things out. To sum up here are our goals:</p>

<ul>
<li><p>create a dev environment for writing and exploring Android apps that talk to Google Cloud Endpoints (GCE) back-end</p></li>
<li><p>use OAuth to authenticate the app to the back-end</p></li>
<li><p>create a simple Android app that demonstrates Android app talking to the GCE back-end and using OAuth to authenticate against the back-end</p></li>
</ul>


<p>I assume you are comfortable with Java but have not done much Android programming and are not familiar with any of the Google cloud products. I assume you are a quick learner and will look things up when something isn&rsquo;t clear. I also assume you&rsquo;re running Linux. I believe instructions are the same for OSX but have no idea about Windows.</p>

<!-- more -->


<p>Our Android app will have a button and a text field. When the button is pressed the app will authenticate against the back-end, make a call on a back-end endpoint and put the result in the text field. The endpoint will return the e-mail of the authenticated user. Let&rsquo;s get started.</p>

<h2>Install Android SDK and Google tools</h2>

<p>First, we&rsquo;ll install the Android SDK (called ADT) which is basically an Eclipse IDE bundled with Android-specific tools. Since ADT is Eclipse I use it for both, developing the Android app and the back-end. Head over to <a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</a> to download the bundle.</p>

<p>Once you download the bundle unpack it and execute <code>eclipse/eclipse</code> from within the ADT directory. ADT will start up:</p>

<p>{% img /images/endpoints/adt.png %}</p>

<p>Choose a folder where you will keep all your projects.</p>

<p>Once ADT starts close the default tab and head over to menubar item <code>Help &gt; Install New Software</code>. We&rsquo;ll need to add Google Eclipse Plugin to have AppEngine integration in ADT. You&rsquo;ll need the URL of the plugin repository. You can find the URL at <a href="https://developers.google.com/eclipse/docs/getting_started">https://developers.google.com/eclipse/docs/getting_started</a>. Currently, ADT is Eclipse version 3.8/4.2 so I&rsquo;m using URL <code>http://dl.google.com/eclipse/plugin/4.2</code>. Put that URL into field <code>Work with</code> and press <code>Add</code>, then choose an arbitrary name (say, Google) and click <code>OK</code>. Make sure you select the components shown in the screen-shot below:</p>

<p>{% img /images/endpoints/gep.png %}</p>

<p>Click <code>Next</code>, accept the license agreements and press <code>Finish</code> to begin installation. Once the additional software is installed and ADT has restarted we&rsquo;ll need one more piece. Open <code>Window &gt; Android SDK Manager</code>. You&rsquo;ll need to select <code>Google APIs</code> for the latest Android version. In my case, the latest is 4.3:</p>

<p>{% img /images/endpoints/apis.png %}</p>

<p>We&rsquo;ll also need <code>Google Play Services</code> library for authenticating our app to the back-end:</p>

<p>{% img /images/endpoints/play.png %}</p>

<p>At this point we have installed all software that we&rsquo;ll need for developing and testing our code.</p>

<h2>Create Google Cloud project</h2>

<p>Since our ultimate intention is to run back-end on Google servers using AppEngine we&rsquo;ll go through steps to provision a new &ldquo;Google cloud project&rdquo; in the &ldquo;Google cloud console&rdquo;. This is required even if you intend to perform local testing only. Specifically, we&rsquo;ll be creating so-called client IDs which are needed to allow our Android app to talk to the back-end.</p>

<p>Head over to <a href="https://cloud.google.com/console">https://cloud.google.com/console</a> and create a new project. Choose any name you want:</p>

<p>{% img /images/endpoints/project.png %}</p>

<p>Once the project is created click on <code>APIs &amp; auth &gt; Registered apps</code> and press on <code>REGISTER APP</code>. Next, select <code>Web Application</code> and use any name you want:</p>

<p>{% img /images/endpoints/register_web.png %}</p>

<p>At this point you should note down the resulting OAuth2 client ID, we&rsquo;ll make use of it in our code:</p>

<p>{% img /images/endpoints/oauth_client.png %}</p>

<p>In my case, the web client ID is <code>607077117986.apps.googleusercontent.com</code>.</p>

<p>We&rsquo;ll need to perform similar steps for obtaining Android client ID. For this you will need SHA1 checksum of the key used to sign Android app package. During the development phase normally the debug key is used. By default it&rsquo;s stored in <code>~/.android/debug.keystore</code>. To obtain the checksum type the following in the terminal:</p>

<p><code>$ keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1</code></p>

<p>Type <code>android</code> when asked for a password and note down the value returned to you. Go back to the cloud console and press <code>REGISTER APP</code>. This time choose <code>Android</code>, specify any name you want. In addition, you will need to input the checksum we obtained earlier and specify our Android app package name. We have not yet created our app but let&rsquo;s decide on package name now. I&rsquo;ve chosen <code>net.pisarenko</code>. Unless you&rsquo;re feeling creative right now leave it as it is:</p>

<p>{% img /images/endpoints/android.png %}</p>

<p>We&rsquo;ll need to note down the Android client ID similarly to what we have done with the web client ID:</p>

<p>{% img /images/endpoints/androidoauth.png %}</p>

<p>In this case it&rsquo;s <code>607077117986-vg4219rv8eljhkhq3648j45ov62vran1.apps.googleusercontent.com</code>.</p>

<p>Great job, we&rsquo;re done with configuring the cloud! Let&rsquo;s finally create our app!</p>

<h2>Create AppEngine-powered Android app</h2>

<p>As a first step we&rsquo;ll create 2 projects using a pre-defined IDE template. One project is for the Android app. The other one is for the back-end. To create the projects open <code>File &gt; New &gt; Other &gt; Google &gt; App Engine &gt; Connected Android Project</code>. Then choose a name (I chose <code>MyTestApp</code>) and specify <code>net.pisarenko</code> as the package name. You are free to choose a different package name but it must be the same as the one you chose in cloud console. Click <code>Finish</code>.</p>

<p>At this point you&rsquo;ll have 2 projects. <code>MyTestApp</code> is the Android app. <code>MyTestApp-AppEngine</code> is the back-end:</p>

<p>{% img /images/endpoints/projects.png %}</p>

<h2>Write/alter the back-end code</h2>

<p>At this point we have some generated code but as I mentioned in the introduction I don&rsquo;t like that. I prefer to start <em>really minimal</em> so that I understand what&rsquo;s happening. Let&rsquo;s start by deleting all files under <code>MyTestApp-AppEngine &gt; src &gt; net.pisarenko</code> so it looks like this:</p>

<p>{% img /images/endpoints/deleted.png %}</p>

<p>By doing this we have deleted the default endpoints provided by the template. Now we&rsquo;ll write our own endpoint. First, it&rsquo;s important to realize that Cloud endpoints operate on POJO objects (basically Java objects with getters and setters) so you can&rsquo;t just send a string or expect a string in return from the back-end. We&rsquo;ll start by defining some simple objects. Let&rsquo;s create one class to represent a request argument and another class for the return value. Create a class <code>MyRequest</code> with the following code:</p>

<p>{% codeblock MyRequest.java lang:java %}
package net.pisarenko;</p>

<p>import javax.persistence.Entity;</p>

<p>@Entity
public class MyRequest {</p>

<pre><code>private String message;

public String getMessage() {
    return message;
}

public void setMessage(String message) {
    this.message = message;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Note the use of <code>@Entity</code> annotation. And a similar class for the result value:</p>

<p>{% codeblock MyResult.java lang:java %}
package net.pisarenko;</p>

<p>import javax.persistence.Entity;</p>

<p>@Entity
public class MyResult {</p>

<pre><code>private String value;

public MyResult(String value) {
    this.value = value;
}

public String getValue() {
    return value;
}

public void setValue(String value) {
    this.value = value;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Now let&rsquo;s create a simple endpoint. I&rsquo;ve called it <code>MyEndpoint</code>. Take note of annotations, I believe most of them are self-explanatory:</p>

<p>{% codeblock MyEndpoint.java lang:java %}
package net.pisarenko;</p>

<p>import com.google.api.server.spi.config.Api;
import com.google.api.server.spi.config.ApiMethod;
import com.google.api.server.spi.config.ApiNamespace;</p>

<p>import java.util.logging.Logger;</p>

<p>@Api(name = &ldquo;myendpoint&rdquo;, namespace = @ApiNamespace(</p>

<pre><code>ownerDomain = "pisarenko.net",
ownerName = "pisarenko.net", packagePath = ""))
</code></pre>

<p>public class MyEndpoint {</p>

<pre><code>private static final Logger log = Logger.getLogger(
    MyEndpoint.class.getName());

@ApiMethod(name = "compute")
public MyResult compute(MyRequest req) {
    log.severe("API CALLED");
    return new MyResult("HELLO " + req.getMessage());
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>As you see, the API will be exposed under name <code>myendpoint</code> and the endpoint is going to be called <code>compute</code>. The endpoint logs the call, takes the input value and returns a string wrapped into a <code>MyResult</code> POJO.</p>

<p>After you make changes to the back-end you must regenerate client libraries before you run the back-end or try to use new/changed functionality in the client. To regenerate simply right click the back-end project and choose <code>Google &gt; Generate Cloud Endpoint Library</code>:</p>

<p>{% img /images/endpoints/generate.png %}</p>

<h3>API explorer</h3>

<p>Wow, we have a back-end. Now, wouldn&rsquo;t it be cool if we could try it out without the hassle of deploying it? Well, that&rsquo;s possible using Google API Explorer. The coolest part is that API explorer works with locally run back-ends!</p>

<p>First, we&rsquo;ll need to start our back-end locally. Click <code>Run &gt; Run</code>. Unless port 8888 is used on your machine the back-end will start and you&rsquo;ll see output in Eclipse console:</p>

<p>{% img /images/endpoints/appengine.png %}</p>

<p>Note that I&rsquo;m running my back-end on port 8080 as port 8888 is occupied on my machine for something else. Now, the magic part. Point your browser to <a href="https://developers.google.com/apis-explorer/?base=http://localhost:8888/_ah/api#p/">https://developers.google.com/apis-explorer/?base=http://localhost:8888/_ah/api#p/</a> and you&rsquo;ll see your endpoint magically appearing:</p>

<p>{% img /images/endpoints/api1.png %}</p>

<p>You can make interactive calls to your local back-end right in the explorer and observe the output (again, note that I&rsquo;m using port 8080 and not 8888):</p>

<p>{% img /images/endpoints/api2.png %}</p>

<p>Observe that when you&rsquo;re doing these calls the console output in ADT logs a line <code>API CALLED</code> which confirms that we&rsquo;re executing it! Without API explorer it would be harder to test and develop endpoints. You would need to craft complicated HTTP requests or write a test client.</p>

<h3>Add authentication</h3>

<p>At this point we have a working back-end with an endpoint. Before we move on to our Android app let&rsquo;s implement authentication. After all, the Android app I&rsquo;m working on must be able to identify itself to the back-end in order to retrieve user&rsquo;s items.</p>

<p>We&rsquo;ll need to include client IDs that we had generated previously and update our endpoint. Let&rsquo;s create constants for the client IDs. I&rsquo;ll create a separate class called <code>Ids</code>:</p>

<p>{% codeblock Ids.java lang:java %}
package net.pisarenko;</p>

<p>public class Ids {</p>

<pre><code>public static final String WEB_CLIENT_ID =
        "607077117986.apps.googleusercontent.com";                     
public static final String ANDROID_CLIENT_ID =
        "607077117986-vg4219rv8eljhkhq3648j45ov62vran1.apps.googleusercontent.com";                                                                                                  
public static final String ANDROID_AUDIENCE = WEB_CLIENT_ID;                                
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Remember, these are the same IDs that we previously got from the cloud console. Next, we need to update the endpoint code to use authentication:</p>

<p>{% codeblock MyEndpoint.java(updated) lang:java %}</p>

<p>package net.pisarenko;</p>

<p>import com.google.api.server.spi.config.Api;
import com.google.api.server.spi.config.ApiMethod;
import com.google.api.server.spi.config.ApiNamespace;
import com.google.appengine.api.users.User;</p>

<p>import static com.google.api.server.spi.Constant.API_EXPLORER_CLIENT_ID;</p>

<p>import java.util.logging.Logger;</p>

<p>@Api(name = &ldquo;myendpoint&rdquo;, namespace = @ApiNamespace(ownerDomain = &ldquo;pisarenko.net&rdquo;, ownerName = &ldquo;pisarenko.net&rdquo;, packagePath = &ldquo;&rdquo;))
public class MyEndpoint {</p>

<pre><code>private static final Logger log = Logger.getLogger(MyEndpoint.class.getName());

@ApiMethod(name = "compute",
        clientIds = {
            Ids.WEB_CLIENT_ID,
            Ids.ANDROID_CLIENT_ID,
            API_EXPLORER_CLIENT_ID },
        audiences = { Ids.WEB_CLIENT_ID, Ids.ANDROID_CLIENT_ID },
        scopes = {
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile" })
public MyResult compute(MyRequest req, User user) {
    log.severe("CALLING");
    if (user == null) {
        return new MyResult("HELLO " + req.getMessage());
    } else {
        return new MyResult("HELLO " + user.getEmail());            
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Observe what we have introduced:</p>

<ol>
<li><p>added <code>clientIds</code>, <code>audiences</code> and <code>scopes</code> to the <code>@ApiMethod</code> annotation. <code>API_EXPLORER_CLIENT_ID</code> client ID is needed if we want to allow API explorer to work with our endpoint. Since we&rsquo;re in development/debug mode we surely want that. I don&rsquo;t yet fully understand what the <code>audiences</code> is used for. <code>scopes</code> defines what information we will get from the user.</p></li>
<li><p>added <code>User</code> parameter to the method. If necessary you can throw an exception if someone tries to use the endpoint without a valid identity.</p></li>
</ol>


<p>Our endpoint will now return a string with user&rsquo;s e-mail address if she is authenticated. Let&rsquo;s try this out! Regenerate the endpoint library, stop the back-end if it&rsquo;s running and start it. Then open the API explorer.</p>

<p>Refresh the page to make sure that API explorer has an updated view of your endpoint. First, try using the endpoint same way as you did before and confirm that the behavior is the same.</p>

<p>Then, click the <code>Authorize requests using OAuth 2.0</code> button on the right of the API explorer. You&rsquo;ll be present with the following dialog:</p>

<p>{% img /images/endpoints/scopes.png %}</p>

<p>Select both scopes and click <code>Authorize</code>. This basically means that you grant your own back-end to access certain information from your Google account. Another dialog might appear asking whether you grant access or not. Allow it.</p>

<p>Do another call again. Notice that the return value is different this time. Your e-mail is now returned! Well, in the case of API explorer the value will always be <code>example@example.com</code>:</p>

<p>{% img /images/endpoints/scopes2.png %}</p>

<p>Nevertheless, realize that we now have a fully functioning back-end that is authenticated with OAuth2! And we&rsquo;re running the back-end locally and accessing it through API explorer. Let&rsquo;s get our Android app working.</p>

<h2>The Android app</h2>

<h3>Setup the Android emulator</h3>

<p>First, we&rsquo;ll create a virtual Android device on which we&rsquo;ll run our app. Open virtual device manager by clicking <code>Window &gt; Android Virtual Device Manager</code>. You can choose any name you want. It is important to choose target as <code>Google APIs</code>. If you don&rsquo;t see such option you need to make sure that you have installed Google APIs and Play services. Re-read this guide and possibly restart ADT. Here are some example settings:</p>

<p>{% img /images/endpoints/virtual.png %}</p>

<p>Once the device is created start it by selecting it from the device manager and pressing <code>Start...</code>. It takes a while to start it even on a relatively powerful computer. Usually, the emulator is not fast.</p>

<h3>Integrate Google Play project</h3>

<p>For authentication to work in Android we need to include Google Play project and reference it in our project. To import the project choose <code>File &gt; Import &gt; Android &gt; Existing Android Code Into Workspace &gt; Browse</code>. Navigate to where you keep the unpacked Android SDK, choose <code>sdk\extras\google\google_play_services\libproject\google-play-services_lib</code>, and click <code>OK</code> and <code>Finish</code>. You will now have 3 projects in your workspace, including newly imported <code>google-play-services_lib</code>. You must now include it as a dependency in the Android app project.</p>

<p>Right click the Android app project and choose <code>Properties</code>. Then, navigate to <code>Android</code>. You will need to set the build target as <code>Google APIs</code> and add the <code>google-play-services_lib</code> library:</p>

<p>{% img /images/endpoints/libs.png %}</p>

<h3>Delete template code</h3>

<p>We will delete some of the template code similarly to what we have done with the back-end. Delete classes <code>GCMIntentService.java</code> and <code>RegisterActivity.java</code>. Then, delete code from <code>MainActivity.java</code> so it looks like this:</p>

<p>{% codeblock MainActivity.java lang:java %}</p>

<p>package net.pisarenko;</p>

<p>import android.os.Bundle;
import android.app.Activity;</p>

<p>public class MainActivity extends Activity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Delete the file <code>activity_register.xml</code> from <code>res/layout</code> folder. At this point we have an app which shows <code>Hello world!</code> when started. Nevertheless, let&rsquo;s confirm that it&rsquo;s working by clicking <code>Run &gt; Run As &gt; Android Application</code>. Make sure that the Android project is selected.</p>

<h3>Write the app</h3>

<p>Let&rsquo;s make our app work. Our goal is to invoke the endpoint and get back our own e-mail address. For this purpose we&rsquo;ll add a button. When the button is clicked the app will make a call to the back-end and display the result in a text field. If necessary, the app will ask you to choose a Google account to use.</p>

<p>First, let&rsquo;s add a button. Double click on <code>res/layout/activity_main.xml</code>. You&rsquo;ll be presented with the graphical UI editor for the app&rsquo;s default (and, in our case, only) screen. Drag a button from the left panel somewhere on the screen and save the result:</p>

<p>{% img /images/endpoints/button.png %}</p>

<p>If you double-click the button you will be shown the underlying XML code for the user interface. You&rsquo;ll see that the button is given ID <code>button1</code>. We&rsquo;ll need this to execute a custom action when the button is pressed.</p>

<p>One class that we have not deleted is <code>CloudEndpointUtils.java</code>. Open it and change the field <code>LOCAL_ANDROID_RUN</code> to <code>true</code>. As you have guessed, it means that the app will be using a locally run back-end. While you&rsquo;re in the file make sure that the port number is correct. I have changed <code>8888</code> to <code>8080</code> because my back-end is running on port 8080 locally. Although we have deleted template code we will be actually relying on some of it.</p>

<p>Open <code>MainActivity.java</code> and put the following code in:</p>

<p>{% codeblock MainActivity.java(updated) lang:java %}
package net.pisarenko;</p>

<p>import java.io.IOException;</p>

<p>import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;
import com.google.api.client.json.jackson.JacksonFactory;</p>

<p>import net.pisarenko.myendpoint.Myendpoint;
import net.pisarenko.myendpoint.model.MyRequest;
import net.pisarenko.myendpoint.model.MyResult;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.view.View.OnClickListener;
import android.widget.TextView;
import android.accounts.AccountManager;
import android.app.Activity;
import android.content.Intent;</p>

<p>public class MainActivity extends Activity {</p>

<pre><code>private Myendpoint endpoint;
private GoogleAccountCredential credential;

static final int REQUEST_ACCOUNT_PICKER = 2;
static final String WEB_CLIENT_ID = "607077117986.apps.googleusercontent.com";

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    credential = GoogleAccountCredential.usingAudience(this,
            "server:client_id:" + WEB_CLIENT_ID);

    chooseAccount();

    Myendpoint.Builder endpointBuilder = new Myendpoint.Builder(
        AndroidHttp.newCompatibleTransport(),
        new JacksonFactory(),
        credential);
    endpoint = CloudEndpointUtils.updateBuilder(endpointBuilder).build();

    Button button = (Button) findViewById(R.id.button1);

    button.setOnClickListener(new OnClickListener() {
        public void onClick(View v) {
            new DoSomethingAsync(this, endpoint).execute();
        }
    });
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    switch (requestCode) {
    case REQUEST_ACCOUNT_PICKER:
        if (data != null &amp;&amp; data.getExtras() != null) {
            String accountName = data.getExtras().getString(
                    AccountManager.KEY_ACCOUNT_NAME);
            if (accountName != null) {
                credential.setSelectedAccountName(accountName);
                // User is authorized.
            }
        }
        break;
    }
}

private void chooseAccount() {
    startActivityForResult(credential.newChooseAccountIntent(),
            REQUEST_ACCOUNT_PICKER);
}

private class DoSomethingAsync extends AsyncTask&lt;Void, Void, MyResult&gt; {
    private Myendpoint endpoint;

    public DoSomethingAsync(OnClickListener onClickListener,
            Myendpoint endpoint) {
        this.endpoint = endpoint;
    }

    @Override
    protected MyResult doInBackground(Void... params) {
        try {
            MyRequest r = new MyRequest();
            r.setMessage("Tesla");
            return endpoint.compute(r).execute();
        } catch (IOException e) {
            e.printStackTrace();
            MyResult r = new MyResult();
            r.setValue("EXCEPTION");
            return r;
        }
    }

    @Override
    protected void onPostExecute(MyResult r) {
        TextView t = (TextView) findViewById(R.id.textView1);
        t.setText(r.getValue());
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>OK, there are quite some things going on. We include the web client ID as static field (<code>WEB_CLIENT_ID</code>). Note that it&rsquo;s the same value we got from the cloud console.</p>

<p>The <code>onCreate</code> method is called for every Android screen. We do several things. First, we create a <code>GoogleAccountCredential</code> object and we call the Android account picker. Our app will always call the account picker. A better behavior would only do it once but it&rsquo;s fine for our purposes. Then, we create an object that represents the API of our back-end. Finally, we set a callback on the button&rsquo;s click. We must use an asynchronous task as doing anything complex in the main (UI) thread is highly discouraged in Android.</p>

<p>The <code>DoSomethingAsync</code> task does the actual invocation of the back-end endpoint. I suggest to read Android docs to better understand life-cycles of objects and standard ways of doing things.</p>

<p>That&rsquo;s it! Now, run the app. You&rsquo;ll be presented with an account picker first. Either enter existing account details or create a new one (for tests). Then, click that button and get that authenticated response from the back-end!</p>

<h2>Congratulations!</h2>

<p>Congrats! You now have the whole development stack running on your machine. You can continue experimenting by adding new endpoints to your back-end and building the Android app. As a next step try deploying your code to AppEngine and make the Android emulator talk to it instead!</p>

<p>P.S. I have deleted all mentioned projects and IDs from the console after finishing this tutorial.</p>
]]></content>
  </entry>
  
</feed>
