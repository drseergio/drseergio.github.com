<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Sergey Pisarenko]]></title>
  <link href="http://drseergio.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://drseergio.github.io/"/>
  <updated>2017-04-17T12:32:23+02:00</updated>
  <id>http://drseergio.github.io/</id>
  <author>
    <name><![CDATA[Sergey Pisarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Internet-connected motorcycle project, Part 2]]></title>
    <link href="http://drseergio.github.io/blog/2017/04/17/internet-connected-motorcycle-project-part-2/"/>
    <updated>2017-04-17T09:35:00+02:00</updated>
    <id>http://drseergio.github.io/blog/2017/04/17/internet-connected-motorcycle-project-part-2</id>
    <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/tentaclephotos/33959436251"><img src="https://c2.staticflickr.com/4/3956/33959436251_6c6d9e1c5b.jpg" width="500"></a></p>

<p>In this second post I continue with the <a href="/blog/2017/04/16/internet-connected-motorcycle-project/">short hackathon project I worked on last week</a>. The goal of the project was to hook into engine data of a KTM motorcycle and stream that data in real-time to the cloud. I explain how I reverse engineered the USB wire protocol of a proprietary device called Power Commander 5 from Dynojet and wrote a simple Java program that works on Linux. I also show the tools I used along the way and share my thinking process.</p>

<p><a href="https://github.com/pisarenko-net/pcv-streamer">The project source code is available at github. You&rsquo;re welcome.</a></p>

<h2>Power Commander 5</h2>

<p>I introduced what Power Commander 5 (PCV) is in the first post. It is a third-party module that alters engine fuel injection by intercepting and changing ECU data. It is a programmable computer that adjusts engine behavior on the fly according to a configuration uploaded by the user (called a &ldquo;map&rdquo;). PCV has a micro USB port and works with a provided tool for Windows. The underlying USB protocol is not documented and there is no known API to speak of. It is a closed-source proprietary system which works only with the official software.</p>

<p><a href="/images/pcvtool.jpg"><img src="/images/pcvtool.jpg" width="500"></a></p>

<p>To extract the data I was after I needed to understand how the PCV interacts with the Windows tool and then write a program that mimicks the behavior. Reverse engineering USB devices is nothing new. This has been done before to create Linux drivers for devices that didn&rsquo;t have official support. The process of reverse engineering simpler devices, such as toy cars and toy missile launchers, has been documented extensively (<a href="https://www.linuxvoice.com/drive-it-yourself-usb-car-6/">Drive it yourself: USB car (Linux Voice)</a>). The plan looked like the following:</p>

<ul>
<li>Look at the USB traffic between the PCV and its official software</li>
<li>Capture USB traffic while changing one variable at time (e.g. giving throttle) while keeping everything else constant</li>
<li>Analyze gathered captures to figure the general protocol and structure</li>
<li>Analyze the captures to see where the useful data is (i.e. which bits represent RPM values)</li>
</ul>


<p>Once the protocol was understood it remained to write a Java program for the Raspberry Pi 3 that established a USB connection and communicated with the PCV.</p>

<p><a href="https://www.flickr.com/photos/tentaclephotos/33959434331"><img src="https://c1.staticflickr.com/3/2937/33959434331_defe8fc636_c.jpg" width="800"></a></p>

<h2>Monitoring and capturing USB traffic</h2>

<p>To capture USB traffic I relied on Windows tools. Most of the articles I found used Linux instead. The suggested path is to run Windows OS inside a virtual guest on a Linux host computer. USB traffic would be captured at the host level. The problem was that I couldn&rsquo;t pass the PCV from host to the guest. Since I had a Windows computer handy I decided to use it instead. As a first step I collected basic USB information about PCV. It turned out to be a USB HID class device. USB defines several classes of devices. Each USB class defines functions that manufacturers can use to communicate with devices. HID is normally used for keyboards, mice and various controllers. It&rsquo;s also frequently used in simple USB toy gadgets.</p>

<p>After a quick survey of existing USB traffic capture tools I initially settled on a trial version of Eltima USB Analyzer. At first, the packet field names and terms were confusing. How does &ldquo;direction&rdquo; differ from &ldquo;data_direction&rdquo; and what is &ldquo;TransferBuffer&rdquo;? I had to look-up Windows USB API documentation to understand what those terms referred to. The UI of the software also left a lot to be desired. For example, I had to manually resize columns in the &ldquo;Command View&rdquo; to make the data visible. By default, the columns were too small.</p>

<p><a href="/images/usbanalyzer.png"><img src="/images/usbanalyzer.png" width="500"></a></p>

<p>I couldn&rsquo;t get any insight just by looking at the tool output. I didn&rsquo;t realize that the actual packet data was in the bottom right panel and thought the data is stored in &ldquo;TransferBuffer&rdquo;. I exported the data using JSON. I then wrote a Java parser to try to wrap my head around the data. Throughtout the project I wrote at least a couple of various parsers. It&rsquo;s probably impossible to understand a binary protocol just by looking at random packets. I was looking for patterns. But I was clearly focused on the wrong piece of data. At least I learned that PCV communicates using URB (USB Request Blocks) <a href="http://www.beyondlogic.org/usbnutshell/usb4.shtml#Bulk">bulk transfers &mdash; relatively large messages transferred on the USB bus</a>.</p>

<p>After a dead end I looked for another tool and found HHD Device Monitoring Studio. HHDDMS is much better. From the statistics view I learned immediately that the number of packets exchanged between PCV and Windows tool stays constant. Giving gas or starting the engine didn&rsquo;t change the rate of messages. This was in contrast with simple toy gadgets that typically don&rsquo;t send data unless an action is triggered (e.g. button pressed in the app). That meant that data must have been constantly streamed.</p>

<p><a href="/images/hhdwindow.png"><img src="/images/hhdwindow.png" width="800"></a></p>

<p>In the &ldquo;URB&rdquo; view of HHDDMS I could also see messages exchanged between the app and the PCV.</p>

<p><a href="/images/packets.png"><img src="/images/packets.png" width="800"></a></p>

<p>Still, it didn&rsquo;t make much sense. Every packet appeared somewhat random and some packets even contained interspersed strings (e.g. &ldquo;Dynojet&rdquo;, &ldquo;Device error&rdquo;) that looked like they came from a resource bundle. It turned out later that these strings were just random junk to fill 64 byte packets. At the time I feared another dead end. Unexpectedly, a breakthrough came through Android. What does Android have to do with this?</p>

<h2>Android breakthrough</h2>

<p>Turns out Dynojet released an Android app in 2015 to interface with PCV from smartphones and tablets. Unfortunately, the app didn&rsquo;t have the functionality I was after &mdash; it didn&rsquo;t expose real-time statistics but otherwise it was impressively functional. Still, the basic routines to communicate with PCV should have been there. The thing with Android apps is that it&rsquo;s extremely easy to decompile them to human readable form. So I downloaded the *.apk file, ran it through <a href="https://github.com/pxb1988/dex2jar/">dex2jar</a> and opened it in <a href="https://github.com/deathmarine/Luyten">Lyuten</a>. The results were better than expected &mdash; by looking at the decompiled code I could understand enough about how the USB packets were constructed. It was the right missing puzzle piece.</p>

<p><a href="/images/luyten.png"><img src="/images/luyten.png" width="800"></a></p>

<p>PCV USB packets are formed the following way. First 4 bytes are filled with a random integer (which had confused me earlier), followed by 2 bytes command ID, followed by 2 bytes payload length, followed by payload and finally followed by random junk to fill a 64 byte packet. What&rsquo;s unusual is the little endian order. So, for example, &ldquo;0x0500&rdquo; is decoded as 5 and not as 1280. To convert to decimal one needs to reverse the bytes first, i.e. &ldquo;0x0005&rdquo;. Existing command IDs can be learned from the decompiled Android code. If anyone is interested in writing a Linux version of the PCV software the Android app is a great source of knowledge.</p>

<p>Equipped with the knowledge I wrote yet another parser to analyze various packet captures I had made earlier to find where the RPM and throttle values are &ldquo;hidden&rdquo;. Finally, it occurred to me that to obtain the data from PCV I must send command &ldquo;5&rdquo; to it first. Then, the PCV responds with the data. The random integer is used in the protocol to associate requests with responses. If I make a request packet &ldquo;0x C5 59 AB 0E &hellip;&rdquo; the PCV also responds with &ldquo;0x C5 59 AB 0E &hellip;&rdquo;.</p>

<h2>Putting it all together</h2>

<p><a href="https://www.flickr.com/photos/tentaclephotos/33247339174"><img src="https://c1.staticflickr.com/3/2947/33247339174_911a5efd4f_c.jpg" width="800"></a></p>

<p>With the protocol figured out it remained to write a program that communicates with PCV over USB. I used <a href="http://usb4java.org/">usb4java</a> Java library. It took me a couple of iterations to understand what the different concepts mean (e.g. pipe, connection) but the few available code examples were sufficient.</p>

<p>Here&rsquo;s a demonstration of the program running on Raspberry Pi 3. The program prints out extracted RPM and throttle values. While recording the video I rolled the throttle on the bike and you can see the values increase (the throttle value range is 1..1000). The engine was turned off so the RPM read-out is 0.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Vn19y9DZIvw "></iframe></div></p>

<p>I enjoyed the research part of the project immensely. It was the part of the project I enjoyed the most. Figuring out a binary protocol felt like detective work. Although there were confidence valleys and dead ends I pressed on and made it work. I look forward to more challenging projects in future.</p>

<p>I imagine that my progress in reverse engineering Power Commander 5 interface is potentially reusable so please help yourself and do something with it if you want &mdash; <a href="https://github.com/pisarenko-net/pcv-streamer">the code is published on github</a>.</p>

<p>&hellip;to be continued in part 3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internet-connected motorcycle project, Part 1]]></title>
    <link href="http://drseergio.github.io/blog/2017/04/16/internet-connected-motorcycle-project/"/>
    <updated>2017-04-16T17:44:00+02:00</updated>
    <id>http://drseergio.github.io/blog/2017/04/16/internet-connected-motorcycle-project</id>
    <content type="html"><![CDATA[<p><a href="/images/vitpilen.jpg"><img src="/images/vitpilen.jpg" width="500"></a></p>

<p>Since autumn 2016 I&rsquo;m working at an IoT company &mdash; we build Internet-connected home automation devices. Last week we had an internal hackathon to try something new. Essentially, it was a chance to work outside of the comfort zone and try out new APIs and hardware in the vast world of IoT. At first I was struggling to come up with an idea. Some ideas seemed trivial, others unrealistic. Finally, I brainstormed over available hardware and my surroundings and decided to make my KTM Duke 390 motorcycle join the IoT party!</p>

<p>In a series of 3 posts I will give an overview of the project and the top level design, <a href="/blog/2017/04/17/internet-connected-motorcycle-project-part-2/">share the reverse engineering process of connecting to the Dynojet&rsquo;s Power Commander 5 fuel injection adjustment unit</a> and belatedly admire the maturity and functionality of Amazon Web Services. Without further ado I&rsquo;m going to introduce the actual project.</p>

<p><a href="https://github.com/pisarenko-net/pcv-streamer">The project source code is available at github. You&rsquo;re welcome.</a></p>

<h2>Project and goals</h2>

<p>Of the things I own and use everyday KTM Duke 390 is in a league of its own. <a href="/blog/2016/07/23/farewell-bmw-f800gs-adventure/">As I previously written</a>, I don&rsquo;t like riding and owning motorcycles that much. This KTM is different. I purchased it for a practical reason. It effectively cuts my commute to about 50 minutes per day (from about 2 hours if taking public transport). It&rsquo;s cheap to buy and own, light (&lt;150kg), sufficiently powerful, maneuverable and subjectively aesthetically pleasing.</p>

<p><a href="https://www.flickr.com/photos/tentaclephotos/34074232195"><img src="https://c2.staticflickr.com/4/3927/34074232195_7e8d699d84_c.jpg" width="800"></a></p>

<p>What does it actually mean to connect a motorbike to the Internet? I defined it as tapping into the data that the bike&rsquo;s engine provides, such as RPMs and how much throttle is currently given by the rider (1-100%), and sending that data to online services. The data could be used to analyze bike performance on a race circuit so that the engine could be later tuned. Since the major intent with the project was learning I also wanted to try out a couple of Amazon services, such as <a href="https://aws.amazon.com/iot-platform/how-it-works/">Amazon IoT</a> and serverless <a href="https://aws.amazon.com/lambda/">Lambda functions</a>.</p>

<p>In addition to the appreciation for the bike itself I knew my bike had a micro USB port hidden under the seat and that a glorious Raspberry Pi 3 was among the available hardware for the hackathon. These two facts seemed to match perfectly. The existence of the USB interface instilled confidence that the project was feasible. I don&rsquo;t think I would hook into an engine ECU otherwise. It would be a bigger hardware challenge. And I don&rsquo;t even have a garage to work in!</p>

<p>I limited the scope to RPMs and throttle values only. I also didn&rsquo;t want to spend time writing server side code and setting up web services and infrastructure even though that&rsquo;s not terribly difficult. The point of the project was not to exercise skills building CRUD applications and configuring standard services like message queues. I get enough of that during my day job. Instead, I chose to combine a couple of serverless Amazon services to hack something together. The cost was also important. I used a free tier and wanted to spend exactly 0$ on this.</p>

<h2>Hardware</h2>

<p>I was mostly guided by what&rsquo;s available. We had a bunch of Raspberry Pi 3 boards available. That was a nobrainer. These are staples of DIYers and makers. Raspberry Pi 3 needs no introduction. It&rsquo;s just a small x86 computer. It can do anything a regular computer can do. Hence, the entry barrier is nonexistent. I have set it up in 20 minutes.</p>

<p><a href="/images/raspberrypi3.jpg"><img src="/images/raspberrypi3.jpg" width="500"></a></p>

<p>After the setup I had a complete Linux computer available to me, complete with SSH, Linux kernel (and, by extension, its wide device support) and standard environment. I also didn&rsquo;t need to learn a new programming language &mdash; I could program in virtually any language I wanted.</p>

<p>Raspberry Pi 3 can be powered from a USB port. As an owner of a 10,000mah USB energy bank I couldn&rsquo;t be happier. That meant the Raspberry Pi 3 is essentially a battery powered device!</p>

<p><a href="/images/powerbank.jpg"><img src="/images/powerbank.jpg" width="500"></a></p>

<p>The other hardware component is more unusual. As I mentioned above, my bike has a mini USB port. But not every motorcycle has one. Last year I had installed a device from Dynojet called Power Commander 5 (PCV, for short). It is a third-party module that intercepts communication on the ECU and makes adjustments according to a predefined configuration. Typically PCV is used for performance reasons. I personally installed it to improve engine smoothness over low RPMs (during commutes). PCV is available for many bike models. The microprocessor is the same but the wiring harnesses that tap into ECUs differ for each bike model.</p>

<p><a href="/images/pcv.png"><img src="/images/pcv.png" width="500"></a></p>

<p>The PCV is a proprietary closed-source device. It is equipped with a micro USB port and communicates with a piece of software for Windows that lets users upload custom engine configurations and fine-tune parameters. Apart from the genuinely useful features, the software also shows real-time figures, like the RPMs and throttle values that I was after. Since the Windows tool can somehow read data from the PCV I correctly assumed it must be possible to somehow extract the data on Linux.</p>

<p>Because PCV is a proprietary device there is no developer documentation or anything such as a public APIs available. That meant that I had to reverse engineer the protocol and understand how it works. There was absolutely zero information about it on the Internet. Apparently, nobody was really interested in it. Can&rsquo;t say I&rsquo;m surprised &mdash; there are many other useful things to do. In any case, the reverse engineering aspect of the project was the largest risk. I wasn&rsquo;t sure at all. The device could have had some kind of obfuscation or even packet encryption. I was also lucky along the way. I cover the reverse engineering process in part 2. All in all, reverse engineering took about 80% of the whole project time.</p>

<h2>Software architecture and constraints</h2>

<p>The project being a hackathon the biggest constraint was time or the lack of it. I had 4 days to complete the project but I also had to take care of an occasional issue in our live system. Due to ongoing commitments I limited my engagement to regular working hours. For that reason I chose not to spend much time on familiar but time-consuming aspects, such as backend development. I didn&rsquo;t design the system to be efficient or scalable or useful. In fact, the choice of the server-side system was in the end not that great. I also settled on a familiar programming environment, namely Java.</p>

<p>Java is installed by default in Raspbian, the Linux flavor Raspberry Pi 3 comes with it. I had to install JDK 8, though. Raspbian comes with version 7. I verified that Java has a good library for USB communication (<a href="http://usb4java.org/quickstart/javax-usb.html">usb4java</a>) and that I could easily interact with Amazon IoT. I carried out most of the development and debugging on an OSX host with IntelliJ IDEA. I couldn&rsquo;t get OSX to work with the PCV device without getting into low level OSX programming so in the later phases I mostly ran code from the Raspberry Pi.</p>

<p><a href="https://www.flickr.com/photos/tentaclephotos/33236540854"><img src="https://c1.staticflickr.com/3/2885/33236540854_4a43119fe8_z.jpg" width="800"></a></p>

<p>The architecture of the system is very simple. The client program connects to the PCV device and to the Internet. It then streams data in real-time to the Amazon Web Services (to be explained in part 3). The only constraint was that the tool should be resilient to Internet and PCV device disconnects. The server side should accept the stream of data from the client, persist it and visualize it. Connectivity to the Internet would be provided by an Android phone through a hotspot feature.</p>

<h2>Challenges and future prospects</h2>

<p>I completed the project. As I stood outside and listened to the roar of the engine, the Raspberry Pi 3 communicated with the PCV and streamed the data through MQTT protocol to Amazon IoT. Some magic trickery (not really) in Amazon services then transformed the messages into metrics that were exposed through the AWS management console. It worked!</p>

<p><a href="https://www.flickr.com/photos/tentaclephotos/33267251433"><img src="https://c1.staticflickr.com/3/2938/33267251433_1f180b5215_c.jpg" width="800"></a></p>

<p>I have spent most of the project time on reverse engineering. And I liked it. It was a like a rewarding puzzle. I almost gave up several times but miraculously got enough breakthroughs to persevere. I imagine that my progress in reverse engineering Power Commander 5 interface is potentially the most reusable part of the project so please help yourself and do something with it if you want &mdash; <a href="https://github.com/pisarenko-net/pcv-streamer">the code is published on github</a>. I will share how I analyzed the PCV devices and learned its wire protocol in the next part.</p>

<p>The final result is crude but it&rsquo;s a 0.0.1 version. I imagine this could be used to write a complete Linux software for the PCV device. An even more ambitious goal is to make a cloud-based system that uploads engine configurations on the fly and tunes parameters on the go. <a href="https://www.wired.com/2015/07/hackers-remotely-kill-jeep-highway/">I&rsquo;m not sure I&rsquo;d like that on my bike though&hellip;</a></p>

<p>&hellip;to be continued with the juicy reverse engineering bits (pun intended) <a href="/blog/2017/04/17/internet-connected-motorcycle-project-part-2/">in part 2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Better at Solving Coding (Interview) Problems]]></title>
    <link href="http://drseergio.github.io/blog/2016/07/08/getting-better-at-solving-coding-interview-problems/"/>
    <updated>2016-07-08T18:37:00+02:00</updated>
    <id>http://drseergio.github.io/blog/2016/07/08/getting-better-at-solving-coding-interview-problems</id>
    <content type="html"><![CDATA[<p>This is part 2 of a series of articles themed &ldquo;Preparing for Software Engineer Interviews&rdquo;. My goal with the series is to document the steps I took while preparing for interviews for a software engineering position after working six years in predominantly support-leaning roles. I won&rsquo;t break new ground here but rather share personal experience &mdash; anything you see here is an echo of what you can find elsewhere on the Internet. But too much of a good thing could be bad. Too much advice obscures itself and makes it hard to navigate. In <a href="/blog/2016/06/12/the-kata-of-code/">part 1</a> I explained how I improved my knowledge of algorithms and data-structures as well as introduced a regular coding exercise. In this part I will explain how I went about improving interview coding skills.</p>

<p>When I was originally confronted with preparing for interviews I pulled many online resources together: posts on quora and stackoverflow, blog posts, articles and forum discussions. Some of the posts were quite detailed and comprehensive. There is lot of common advice but I struggled because there was just too much to do and too many ways to go about it. I decided to follow a simple plan which I will shortly explain below.</p>

<p>What is so special about software engineer interviews? The basic premise of most coding interviews (we&rsquo;re talking about interviews at mostly large tech companies here) is to present a candidate with a novel problem that he has never seen before to see how good his reasoning and problem solving skills are. Presumably, a coding interview is a good indicator of candidate&rsquo;s abilities and real-world productivity. Seeing how the candidate struggles under pressure, comes up with brilliant solutions and communicates with the interviewer is a telltale sign of his future success at the company. Unfortunately, that&rsquo;s only a presumption and the reality is complicated but at the moment most tech companies stick to the same format which means that candidates must eventually go through it. So let&rsquo;s look through some preparation ideas and shed some bullshit along the way.</p>

<p>First, there&rsquo;s the novelty issue. It is not feasible to come with a completely new coding problem for every interview. Instead, inteviewers usually rely on a limited repertoire of problems. These problems eventually leak out and get shared online. More importantly, though, many problems share similar problem-solving strategies. Once the insight is known to a candidate the problem reduces to relatively painless translation to code. I&rsquo;ve seen judgements against candidates that try to memorize solutions. But how can a solution be memorized? There are not 10 or 20 problems out there. There are hundreds, even thousands. Nobody would try to memorize the solution code line by line. But it is fair to assume that candidates memorize ideas and patterns behind the problems. How else could the candidates do well on interviews? Let&rsquo;s take mathematics. Undeniably there is lots of memorization involved when learning any subject in mathematics. We can&rsquo;t assume that candidates come up with algebra concepts from scratch during their short stay. Why then would it be fair to expect candidates to come up with algorithms that took very distinguished and persistent computer scientists and engineers to come up with?</p>

<p>In short, obtaining the insight and patterns behind coding problems and memorizing the right things is in my opinion the essence of interview preparation. Even the most distinguished engineers admit that in their day to day work they rarely get a chance to tackle difficult algorithmic challenges. I&rsquo;m not saying that advanced skills are unnecessary and everyone should be an API coding monkey. I&rsquo;m saying that candidates must work through typical coding problems, extract vital problem solving patterns and approaches. The fact remains, though, that some amount of memorizing is unavoidable. If a candidate didn&rsquo;t have a need to optimize things at a very low level it&rsquo;s unlikely he&rsquo;ll come up with a good solution for bit twiddling questions even though he understands the underlying concepts well. He just wouldn&rsquo;t have enough time. And certain efficient solutions are very clever to the point of being obscure and unintuitive. There&rsquo;s little chance of coming up with one during 45 stressful minutes.</p>

<p>In fact, I would go as far as to say that some solutions must be memorized almost to the point of line by line. Okay, maybe not that far. But there are a some smaller-sized questions that interviewers like to ask as a warm-up. For example, to implement a power function or the greatest common divisor function. The thing is, interviewers expect flawless and, most importantly, quick (read immediate) implementation. Even if a candidate understands the idea it might take too long to translate that idea into code on the board. Plus, there are many possibilities for subtle common bugs, such as off-by-one errors, out-of-bounds, etc. Normally, a programmer is not rushed so there&rsquo;s sufficient time to think, sketch pseudocode, implement and take care of edge cases. Because the problem is not difficult the interviewer will pick apart even the smallest mistakes and attach disproportionate weight to them. Clearly, candidates that prepared well will look more capable although it is debatable if their performance difference would translate in anything measurable in the real world.</p>

<p>Once a candidate gets exposed to a sufficient amount of problems (in the range of hundreds) there comes a plateau point. That&rsquo;s completely normal and expected. Despite the acquired experience many problems won&rsquo;t seem any easier. That&rsquo;s also normal. In fact, this discourages many aspiring competitive programmers from further pursuing the challenge. Certain kinds of problems do not fall under neat patterns and require a different mindset. I personally haven&rsquo;t yet managed to overcome this plateau. The good news is that such problems are rarely, if ever, asked in interviews. The bad news is that getting good at difficult problems worsens performance at interview problems. And the reason is that one tries to apply unconvential and complex data-structures and algorithms whereas most interview coding problems are centered around a set of relatively simple tools. Dead-ends are time consuming and reduce chances of solving the problem. After going through many rounds of mock interviews (which I discuss in the 3rd part of the series) I realized that I must recalibrate my toolkit and stick to simplest tools unless everything else fails. When my first thought reaches for a suffix tree I resist and instead try one of the following (not exhaustive): sorting, using a queue/stack, traversing, reversing, doing binary search, recursing. I also find it helpful to think of a brute force solution first. The lesson is that most coding problems are simple and rarely involve anything exotic. When they do the interviewer is prepared to almost immediately spill the beans on the magic insight.</p>

<p>So how to go about actually preparing? I have taken a whole month of full-time effort to specifically practice interview coding problems. There are many popular sources with coding problems, to name a few:</p>

<ul>
<li><p><a href="https://www.topcoder.com/">TopCoder</a> &mdash; not suited well for interview preparation because of the nature of the problems, weird problem classification and an arcane UI. TopCoder is really a tool for competitive programming and it&rsquo;s not designed for practicing interview problems. Given time constraints and different goals in mind I wouldn&rsquo;t spend time on TopCoder.</p></li>
<li><p><a href="https://uva.onlinejudge.org/">UVA judge</a> &mdash; automated system for submitting solutions to various competitive programming problems. Suffers from similar problems as TopCoder. Also, just like with TopCoder, it is hard to keep track of progress or to cover all topics.</p></li>
<li><p><a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850">Cracking the Coding Interview book</a> &mdash; extremely popular book with around 150 coding problems and solutions. I went through an earlier edition years ago. Haven&rsquo;t seen or used the recent one.</p></li>
<li><p><a href="https://www.interviewbit.com/">interviewbit</a> &mdash; a well designed system specifically for preparing for interviews. Problems are classified by topics. There&rsquo;s search functionality that lets, for example, to search for problems asked at certain companies. interviewbit also has an excellent gamified progress tracking functionality. Unfortunately, I found out too late about it. Otherwise, I would have likely used it as a primary preparation tool.</p></li>
<li><p><a href="https://www.amazon.com/Elements-Programming-Interviews-Java-Adnan/dp/1517671272">Elements of Programming Interviews in Java (EPI) book</a> &mdash; this is my choice! The books comes with hundreds of problems with clear explanations of brute-force and optimal solutions. C++ edition is also available.</p></li>
<li><p><a href="https://www.hackerrank.com/">HackerRank</a> &mdash; feels like a system which serves both competitive programming and interview preparation well. There are many practice problems classified by topics and regular hosted competitions. I have used HackerRank as a complementary resource.</p></li>
<li><p><a href="http://www.geeksforgeeks.org/">GeeksForGeeks</a> &mdash; a daily blog of coding problems. I have yet to come across an interview coding problem that is not published there.</p></li>
</ul>


<p>Once I settled on a primary source I&rsquo;ve done two passes:</p>

<ol>
<li><p>Go through every problem in the EPI book and solve them algorithmically without writing any code. I&rsquo;ve set a time limit of 10-15 minutes per problem. Once the time limit expired I consulted the solution. I think it&rsquo;s better to have a time limit rather than get stuck for hours on a problem. Generally, I think it&rsquo;s great to sometimes persist on a problem until it cracks but given the goals of interview preparation it&rsquo;s more effective to absorb as many concepts as possible. For every problem I wrote down the main insight. It took me about 2 weeks to finish the whole book.</p></li>
<li><p>Go through every solved problem and write code for it. This is where I realized that my previously-written notes were terrible so I often had to solve the problems again. I wrote code on paper and I felt that writing code with the insight in hand is easy. I&rsquo;m sure there are folks for whom finding the insight is easier.</p></li>
</ol>


<p>I complemented EPI with problems from the HackerRank site. Finally, during two weeks leading to interviews I also solved every problem marked with the company I was applying for on interviewbit. You&rsquo;d be surprised just how often widely publicized problems are still actively asked in interviews so it pays to go through them. I haven&rsquo;t actually used interviewbit as a platform. Instead, I just read the problem descriptions and solved them on paper. Whenever I got stuck I consulted the hints or complete editorials (solutions).</p>

<p>After putting so much effort in the preparation can I say it was worth it? Did it help to get an offer? Getting good at solving coding interview problems takes a considerable effort and it is not a sure guarantee of success. However, a lack of such preparation is a sure guarantee of failure. There are too many factors vying for the final hire/no hire decision and success is anything but guaranteed. Just like with the algorithm and data-structure study I feel this effort made me a little bit better as a programmer. And just like with <a href="/blog/2016/06/12/the-kata-of-code/">algorithm katas</a> I would like to adopt a habit of regularly solving coding problems to improve further.</p>

<p>In the concluding part 3 I will talk about the final interview preparation steps and also talk about the psychological challenges that many candidates such as myself face before and during the interviews and the ways to tackle them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Kata of Code]]></title>
    <link href="http://drseergio.github.io/blog/2016/06/12/the-kata-of-code/"/>
    <updated>2016-06-12T15:28:00+02:00</updated>
    <id>http://drseergio.github.io/blog/2016/06/12/the-kata-of-code</id>
    <content type="html"><![CDATA[<p>This is part 1 of a series of articles themed &ldquo;Preparing for Software Engineer Interviews&rdquo;. My goal with the series is to document the steps I took while preparing for interviews for a software engineering position after working six years in predominantly support-leaning roles. I won&rsquo;t break new ground here but rather share personal experience &mdash; anything you see here is an echo of what you can find elsewhere on the Internet. But too much of a good thing could be bad. Too much advice obscures itself and makes it hard to navigate. In this part I will explain how I went about refreshing and improving knowledge of algorithms and data structures.</p>

<p>A fancy word makes even the most mundane things sound legitimate. Enter &lsquo;kata&rsquo; &mdash; a fancy way of saying that one does something mundane, regularly. Originally, the Japanese word &lsquo;kata&rsquo; stands for a very specific kind of practice in traditional arts. But in the programming world it&rsquo;s synonymous with a repetitive coding practice. I have no opinion in the linguistic department but I believe the practice might have some substance. Let me rewind a little bit.</p>

<p>Exactly one year ago I <a href="/blog/2015/06/16/why-i-have-quit-an-awesome-job/">left a wonderful job in one of the best places to work</a> on this planet. With such a drastic move there&rsquo;s a multitude of reasons. One of the major ones is my ambition to become an excellent software engineer and steer away from the technical support role I had so far pursued.</p>

<p>The first obstacle on the way are the well-known and sometimes wacky software interviews that most respectable companies seem to rely on for choosing among candidates. To prepare myself for the challenge I devised a multi-month plan. About 3 months ago, as I was done with another full-time endeavour, I put the plan through its paces. In this article I&rsquo;ll do my best to explain the first step of the plan &mdash; the study and practice of algorithms and data-structures.</p>

<p>It&rsquo;s not like I&rsquo;ve never studied algorithms. In fact, I hold a computer science degree and have completed several excellent online algorithm-focused courses with top marks (<a href="https://www.coursera.org/course/algs4partI">Algorithms Part I</a>, <a href="https://www.coursera.org/course/algs4partII">Algorithms Part II</a>). But annoyingly if you had asked me to implement a path-finding algorithm or even an O(N*LogN) sorting algorithm I would have struggled without referring to technical books or articles. Should you have asked the same question straight after I had just completed the courses I would have absolutely no issues. From a limited personal survey of fellow engineers it is a very common situation. Few keep algorithms in their heads.</p>

<p>Clearly, without an excellent understanding of algorithms passing a coding interview is unlikely. Besides, algorithms and data structures are the cornerstones of computer science and software. Without the understanding of basic structures it&rsquo;s not possible to solve most of the coding challenges. So I dedicated the first month of preparation to the study of algorithms.</p>

<p>However, as I&rsquo;ve already learned, the chosen method of study is critical. It&rsquo;s all to easy to complete a course or a book and then forget everything few weeks after. It is also not sufficient to merely browse through a book or a bunch of articles. Superflous reading creates a perilous illusion of understanding. It is imperative to work through. That&rsquo;s why going through one algorithms book takes a month of full-time effort and not an afternoon. I also emphasize that I had completed algorithm courses before starting this effort. Otherwise, it would make sense to study through the online courses mentioned above first. It would also significantly lengthen the plan.</p>

<p>As there are many more algorithms than the time available to me I had to optimize. It makes little sense to study the most esoteric and domain-specific algorithms for the purpose of preparing for software interviews. I made a survey of interview-related Q&amp;As and websites and came up with the following initial list of algorithms and data structures (in no particular order):</p>

<pre><code>* Stack/Queue (based on LinkedList)
* Selection Sort
* SeparateChainingHashST
* LSD/MSD sort (Radix)
* Graph/Digraph/WeightedGraph
* Edge/EdgeWeightedGraph
* DFS/BFS
* Binary Search
* Weighted Quick Union
* Insertion Sort
* Shell Sort
* DFSPaths/BFSPaths
* Cycle detection in undirected graph
* Connected Components with DFS in undirected graph
* Bipartite check in undirected graph (two color)
* Merge Sort
* Bottom-up Merge Sort
* Quicksort
* 3-way Quicksort
* CountSort
* Min/MaxPQ
* Heapsort
* BST
* Red-black BST
* LinearProbingHashST
* Cycle detection in directed graph
* DFS order and Topological sort
* Kosaraju-Sharir Strong Connected Components in directed graph
* Kruskal MST
* Prim MST
* Dijkstra SP
* Acyclic SP
* Bellman-Ford SP
* Knuth-Morris-Prath search
* Boyer-Moore search
</code></pre>

<p>It is debatable if some of the algorithms in this list are already too complex for general software engineering interviews (knowledge of esoteric algorithms might be required for more senior or specialized roles). In fact, as practice went by I added a few additional ones and removed a few.</p>

<p>The book I chose for my study is &ldquo;<a href="https://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X">Algorithms, 4th edition</a>&rdquo; from Robert Sedgewick at Princeton University. It&rsquo;s written by the same professor that teaches the corresponding online courses. What sets it apart from other famous algorithm texts is the focus on visually illustrating algorithms and doing algorithm-tracing exercises. Working through an algorithm on paper and tracing all the steps helps to grasp what the algorithm really does. Through these exercises I uncovered that my mental models for some of the algorithms were wrong. The other huge benefit of this book is a <a href="http://algs4.cs.princeton.edu/">complementary codesite</a> with lots of high-quality and clearly-written implementations of algorithms in Java.</p>

<p>My daily routine consisted of reading about one topic and related algorithms and then trying to re-implement the algorithms myself. As soon as I stumbled I looked-up the text. The complementary code is extremely readable. The implementations may lack some of the fanciest and trickiest optimizations but are invaluable tools for learning. Once I implemented the code I erased and started from scratch, testing thoroughness of my understanding.</p>

<p>As the days went by and I progressed further I felt that I no longer remembered the details of algorithms I had already worked-through. That&rsquo;s when I decided to introduce additional regular algorithm coding practice &mdash; katas. I grouped some of the algorithms together. Then during each practice session I would implement algorithms and data-structures from the top of my head, copying only test cases from the reference implementation. At times I would get stuck. In those moments I learned a little bit more about each algorithm. Often, I would get confused and need to look-up the reference implementation. Next time, though, the practice would become easier and more automatic. Katas keep the algorithm knowledge functional and fresh. Furthermore, being able to implement some of the tricky algorithms from the top of my head on a napkin increases confidence which may sometimes shake under the many stresses of interviews. Finally, being able to implement many algorithms quickly pays off in coding competitions.</p>

<p>I don&rsquo;t know if the original katas are canonical. My coding katas are certainly not. They evolve and change with time. At some point easier algorithms and data-structures become trivial and it no longer makes sense to practice them. I don&rsquo;t practice writing a stack/queue anymore. Sometimes I realize how similar few algorithms are so I leave one of them out. Many graph problems reduce to DFS. Occasionally I study through new algorithms and add them to katas. For example, I&rsquo;ve recently added SkipList and SuffixArray. I also group algorithms so that each kata is of similar size. At the moment I have <a href="https://github.com/drseergio/practice/tree/master/katas">5 katas in my repertoire</a>. It takes about 30-60 minutes to complete each one. I aim to complete all of the katas once a week &mdash; on average less than one kata per day. I&rsquo;m also timing my practice now to see how long each kata takes.</p>

<p><strong>Here&rsquo;s a distilled version of the algorithm study plan (~1 month of full-time effort)</strong>:</p>

<ol>
<li>List algorithms/data-structures you need to learn deeply. When in doubt leave it out. Make it as short as feasible. Can always add more later.</li>
<li>Choose an algorithms text. I recommend <a href="https://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X">&ldquo;Algorithms, 4th edition&rdquo; by Robert Sedgewick</a>.</li>
<li>Schedule sufficient time each day to read the text and implement algorithms by hand. Keep premature enthusiasm at hand and keep the workload manageable. There&rsquo;s a reason it takes a month.</li>
<li>Collect algorithm implementations and group them into katas.</li>
<li>Regularly perform katas by reimplementing algorithms.</li>
<li>Revise katas, remove trivial algorithms and add new ones as you see fit.</li>
<li>Repeat 6, 7.</li>
</ol>


<p>I&rsquo;d like to believe that this study of algorithms and practice of katas will pay off. It is hard to say, taking into account the many factors that affect a hiring decision. Doing a comprehensive study like this won&rsquo;t guarantee success but doing nothing almost certainly guarantees failure. The study of algorithms is just the first interview preparation step. I&rsquo;ve introduced katas as means to not forget what I&rsquo;ve just learned. But as I&rsquo;ve practiced and grown my personal collection I see myself continuing with katas.</p>

<p>In the <a href="/blog/2016/07/08/getting-better-at-solving-coding-interview-problems/">next part (2)</a> I explain my strategy for getting better at solving coding problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to order Dell XPS 13 with US keyboard in Europe]]></title>
    <link href="http://drseergio.github.io/blog/2015/04/05/how-to-order-dell-xps-13-with-us-keyboard-in-europe/"/>
    <updated>2015-04-05T19:46:00+02:00</updated>
    <id>http://drseergio.github.io/blog/2015/04/05/how-to-order-dell-xps-13-with-us-keyboard-in-europe</id>
    <content type="html"><![CDATA[<p>I decided to purchase a laptop as I find myself longing for a computer away from my beloved workstation more often. Last time I bought a laptop was 8 years ago.</p>

<p>Dell built a laptop I feel genuinely excited about &ndash; the new XPS 13. It&rsquo;s as small as 11" machine with really narrow bezel. It comes with specs that are just right for me.</p>

<p><a href="/images/dellxps/dell_order_01.png"><img src="/images/dellxps/dell_order_01.png" width="500"></a></p>

<p>However, I&rsquo;ve learned that buying from Dell is not that easy! I was trying to order XPS 13 laptop with a US layout keyboard using Swiss regional site dell.ch. When I choose US keyboard I get presented with the following error:</p>

<p>&ldquo;The selection &ndash; MUI Etikett für Handauflage is incompatible with Tastatur&rdquo;</p>

<p><a href="/images/dellxps/dell_order_02.png"><img src="/images/dellxps/dell_order_02.png" width="500"></a></p>

<p><a href="/images/dellxps/dell_order_03.png"><img src="/images/dellxps/dell_order_03.png" width="500"></a></p>

<p><a href="/images/dellxps/dell_order_05.png"><img src="/images/dellxps/dell_order_04.png" width="500"></a></p>

<p>I have no clue what &ldquo;MUI Etikett für Handauflage&rdquo; is. It looks like some kind of internal article name. In English it means &ldquo;MUI sticker for palm rest&rdquo; which still makes little sense. I confirmed that the same issue is present on other European Dell stores. I checked Austrian and German sites. Same problem.</p>

<p>I honestly tried to contact support to get it done. Phone support in Switzerland does not provide help unless you have already bought something from Dell. I&rsquo;ve tried contacting other deparments and a support agent suggested I try chat support in Germany. I described the error and provided a screen-shot. The agent said it&rsquo;s a known problem and that it&rsquo;s going to be fixed. Just to be sure the agent recommended I try again tomorrow.</p>

<p>Well, the problem is still there 1.5 weeks later so I guess it&rsquo;s not going to be fixed anytime soon. Anyway, the point of this article is that it&rsquo;s possible to make an order by modifying JavaScript using Developer Tools (in Chrome) or an equivalent in other browsers. It&rsquo;s as simple as enabling the &ldquo;purchase&rdquo; button. Step by step instructions are provided below:</p>

<p>Find the HTML element in DOM that corresponds to the purchase button and remove the &ldquo;disabled&rdquo; class attribute::</p>

<p><a href="/images/dellxps/dell_order_06.png"><img src="/images/dellxps/dell_order_06.png" width="500"></a></p>

<p>Repeat the procedure on the next screen:</p>

<p><a href="/images/dellxps/dell_order_07.png"><img src="/images/dellxps/dell_order_07.png" width="500"></a></p>

<p><a href="/images/dellxps/dell_order_08.png"><img src="/images/dellxps/dell_order_08.png" width="500"></a></p>

<p>So far my order has not been cancelled but I don&rsquo;t know if it&rsquo;s going to work. If this fails I think I&rsquo;ll hold off buying a laptop at this time.</p>
]]></content>
  </entry>
  
</feed>
