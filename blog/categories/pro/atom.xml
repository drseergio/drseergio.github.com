<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pro | Sergey Pisarenko]]></title>
  <link href="http://drseergio.github.io/blog/categories/pro/atom.xml" rel="self"/>
  <link href="http://drseergio.github.io/"/>
  <updated>2017-04-17T12:32:23+02:00</updated>
  <id>http://drseergio.github.io/</id>
  <author>
    <name><![CDATA[Sergey Pisarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Internet-connected motorcycle project, Part 2]]></title>
    <link href="http://drseergio.github.io/blog/2017/04/17/internet-connected-motorcycle-project-part-2/"/>
    <updated>2017-04-17T09:35:00+02:00</updated>
    <id>http://drseergio.github.io/blog/2017/04/17/internet-connected-motorcycle-project-part-2</id>
    <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/tentaclephotos/33959436251"><img src="https://c2.staticflickr.com/4/3956/33959436251_6c6d9e1c5b.jpg" width="500"></a></p>

<p>In this second post I continue with the <a href="/blog/2017/04/16/internet-connected-motorcycle-project/">short hackathon project I worked on last week</a>. The goal of the project was to hook into engine data of a KTM motorcycle and stream that data in real-time to the cloud. I explain how I reverse engineered the USB wire protocol of a proprietary device called Power Commander 5 from Dynojet and wrote a simple Java program that works on Linux. I also show the tools I used along the way and share my thinking process.</p>

<p><a href="https://github.com/pisarenko-net/pcv-streamer">The project source code is available at github. You&rsquo;re welcome.</a></p>

<h2>Power Commander 5</h2>

<p>I introduced what Power Commander 5 (PCV) is in the first post. It is a third-party module that alters engine fuel injection by intercepting and changing ECU data. It is a programmable computer that adjusts engine behavior on the fly according to a configuration uploaded by the user (called a &ldquo;map&rdquo;). PCV has a micro USB port and works with a provided tool for Windows. The underlying USB protocol is not documented and there is no known API to speak of. It is a closed-source proprietary system which works only with the official software.</p>

<p><a href="/images/pcvtool.jpg"><img src="/images/pcvtool.jpg" width="500"></a></p>

<p>To extract the data I was after I needed to understand how the PCV interacts with the Windows tool and then write a program that mimicks the behavior. Reverse engineering USB devices is nothing new. This has been done before to create Linux drivers for devices that didn&rsquo;t have official support. The process of reverse engineering simpler devices, such as toy cars and toy missile launchers, has been documented extensively (<a href="https://www.linuxvoice.com/drive-it-yourself-usb-car-6/">Drive it yourself: USB car (Linux Voice)</a>). The plan looked like the following:</p>

<ul>
<li>Look at the USB traffic between the PCV and its official software</li>
<li>Capture USB traffic while changing one variable at time (e.g. giving throttle) while keeping everything else constant</li>
<li>Analyze gathered captures to figure the general protocol and structure</li>
<li>Analyze the captures to see where the useful data is (i.e. which bits represent RPM values)</li>
</ul>


<p>Once the protocol was understood it remained to write a Java program for the Raspberry Pi 3 that established a USB connection and communicated with the PCV.</p>

<p><a href="https://www.flickr.com/photos/tentaclephotos/33959434331"><img src="https://c1.staticflickr.com/3/2937/33959434331_defe8fc636_c.jpg" width="800"></a></p>

<h2>Monitoring and capturing USB traffic</h2>

<p>To capture USB traffic I relied on Windows tools. Most of the articles I found used Linux instead. The suggested path is to run Windows OS inside a virtual guest on a Linux host computer. USB traffic would be captured at the host level. The problem was that I couldn&rsquo;t pass the PCV from host to the guest. Since I had a Windows computer handy I decided to use it instead. As a first step I collected basic USB information about PCV. It turned out to be a USB HID class device. USB defines several classes of devices. Each USB class defines functions that manufacturers can use to communicate with devices. HID is normally used for keyboards, mice and various controllers. It&rsquo;s also frequently used in simple USB toy gadgets.</p>

<p>After a quick survey of existing USB traffic capture tools I initially settled on a trial version of Eltima USB Analyzer. At first, the packet field names and terms were confusing. How does &ldquo;direction&rdquo; differ from &ldquo;data_direction&rdquo; and what is &ldquo;TransferBuffer&rdquo;? I had to look-up Windows USB API documentation to understand what those terms referred to. The UI of the software also left a lot to be desired. For example, I had to manually resize columns in the &ldquo;Command View&rdquo; to make the data visible. By default, the columns were too small.</p>

<p><a href="/images/usbanalyzer.png"><img src="/images/usbanalyzer.png" width="500"></a></p>

<p>I couldn&rsquo;t get any insight just by looking at the tool output. I didn&rsquo;t realize that the actual packet data was in the bottom right panel and thought the data is stored in &ldquo;TransferBuffer&rdquo;. I exported the data using JSON. I then wrote a Java parser to try to wrap my head around the data. Throughtout the project I wrote at least a couple of various parsers. It&rsquo;s probably impossible to understand a binary protocol just by looking at random packets. I was looking for patterns. But I was clearly focused on the wrong piece of data. At least I learned that PCV communicates using URB (USB Request Blocks) <a href="http://www.beyondlogic.org/usbnutshell/usb4.shtml#Bulk">bulk transfers &mdash; relatively large messages transferred on the USB bus</a>.</p>

<p>After a dead end I looked for another tool and found HHD Device Monitoring Studio. HHDDMS is much better. From the statistics view I learned immediately that the number of packets exchanged between PCV and Windows tool stays constant. Giving gas or starting the engine didn&rsquo;t change the rate of messages. This was in contrast with simple toy gadgets that typically don&rsquo;t send data unless an action is triggered (e.g. button pressed in the app). That meant that data must have been constantly streamed.</p>

<p><a href="/images/hhdwindow.png"><img src="/images/hhdwindow.png" width="800"></a></p>

<p>In the &ldquo;URB&rdquo; view of HHDDMS I could also see messages exchanged between the app and the PCV.</p>

<p><a href="/images/packets.png"><img src="/images/packets.png" width="800"></a></p>

<p>Still, it didn&rsquo;t make much sense. Every packet appeared somewhat random and some packets even contained interspersed strings (e.g. &ldquo;Dynojet&rdquo;, &ldquo;Device error&rdquo;) that looked like they came from a resource bundle. It turned out later that these strings were just random junk to fill 64 byte packets. At the time I feared another dead end. Unexpectedly, a breakthrough came through Android. What does Android have to do with this?</p>

<h2>Android breakthrough</h2>

<p>Turns out Dynojet released an Android app in 2015 to interface with PCV from smartphones and tablets. Unfortunately, the app didn&rsquo;t have the functionality I was after &mdash; it didn&rsquo;t expose real-time statistics but otherwise it was impressively functional. Still, the basic routines to communicate with PCV should have been there. The thing with Android apps is that it&rsquo;s extremely easy to decompile them to human readable form. So I downloaded the *.apk file, ran it through <a href="https://github.com/pxb1988/dex2jar/">dex2jar</a> and opened it in <a href="https://github.com/deathmarine/Luyten">Lyuten</a>. The results were better than expected &mdash; by looking at the decompiled code I could understand enough about how the USB packets were constructed. It was the right missing puzzle piece.</p>

<p><a href="/images/luyten.png"><img src="/images/luyten.png" width="800"></a></p>

<p>PCV USB packets are formed the following way. First 4 bytes are filled with a random integer (which had confused me earlier), followed by 2 bytes command ID, followed by 2 bytes payload length, followed by payload and finally followed by random junk to fill a 64 byte packet. What&rsquo;s unusual is the little endian order. So, for example, &ldquo;0x0500&rdquo; is decoded as 5 and not as 1280. To convert to decimal one needs to reverse the bytes first, i.e. &ldquo;0x0005&rdquo;. Existing command IDs can be learned from the decompiled Android code. If anyone is interested in writing a Linux version of the PCV software the Android app is a great source of knowledge.</p>

<p>Equipped with the knowledge I wrote yet another parser to analyze various packet captures I had made earlier to find where the RPM and throttle values are &ldquo;hidden&rdquo;. Finally, it occurred to me that to obtain the data from PCV I must send command &ldquo;5&rdquo; to it first. Then, the PCV responds with the data. The random integer is used in the protocol to associate requests with responses. If I make a request packet &ldquo;0x C5 59 AB 0E &hellip;&rdquo; the PCV also responds with &ldquo;0x C5 59 AB 0E &hellip;&rdquo;.</p>

<h2>Putting it all together</h2>

<p><a href="https://www.flickr.com/photos/tentaclephotos/33247339174"><img src="https://c1.staticflickr.com/3/2947/33247339174_911a5efd4f_c.jpg" width="800"></a></p>

<p>With the protocol figured out it remained to write a program that communicates with PCV over USB. I used <a href="http://usb4java.org/">usb4java</a> Java library. It took me a couple of iterations to understand what the different concepts mean (e.g. pipe, connection) but the few available code examples were sufficient.</p>

<p>Here&rsquo;s a demonstration of the program running on Raspberry Pi 3. The program prints out extracted RPM and throttle values. While recording the video I rolled the throttle on the bike and you can see the values increase (the throttle value range is 1..1000). The engine was turned off so the RPM read-out is 0.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Vn19y9DZIvw "></iframe></div></p>

<p>I enjoyed the research part of the project immensely. It was the part of the project I enjoyed the most. Figuring out a binary protocol felt like detective work. Although there were confidence valleys and dead ends I pressed on and made it work. I look forward to more challenging projects in future.</p>

<p>I imagine that my progress in reverse engineering Power Commander 5 interface is potentially reusable so please help yourself and do something with it if you want &mdash; <a href="https://github.com/pisarenko-net/pcv-streamer">the code is published on github</a>.</p>

<p>&hellip;to be continued in part 3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internet-connected motorcycle project, Part 1]]></title>
    <link href="http://drseergio.github.io/blog/2017/04/16/internet-connected-motorcycle-project/"/>
    <updated>2017-04-16T17:44:00+02:00</updated>
    <id>http://drseergio.github.io/blog/2017/04/16/internet-connected-motorcycle-project</id>
    <content type="html"><![CDATA[<p><a href="/images/vitpilen.jpg"><img src="/images/vitpilen.jpg" width="500"></a></p>

<p>Since autumn 2016 I&rsquo;m working at an IoT company &mdash; we build Internet-connected home automation devices. Last week we had an internal hackathon to try something new. Essentially, it was a chance to work outside of the comfort zone and try out new APIs and hardware in the vast world of IoT. At first I was struggling to come up with an idea. Some ideas seemed trivial, others unrealistic. Finally, I brainstormed over available hardware and my surroundings and decided to make my KTM Duke 390 motorcycle join the IoT party!</p>

<p>In a series of 3 posts I will give an overview of the project and the top level design, <a href="/blog/2017/04/17/internet-connected-motorcycle-project-part-2/">share the reverse engineering process of connecting to the Dynojet&rsquo;s Power Commander 5 fuel injection adjustment unit</a> and belatedly admire the maturity and functionality of Amazon Web Services. Without further ado I&rsquo;m going to introduce the actual project.</p>

<p><a href="https://github.com/pisarenko-net/pcv-streamer">The project source code is available at github. You&rsquo;re welcome.</a></p>

<h2>Project and goals</h2>

<p>Of the things I own and use everyday KTM Duke 390 is in a league of its own. <a href="/blog/2016/07/23/farewell-bmw-f800gs-adventure/">As I previously written</a>, I don&rsquo;t like riding and owning motorcycles that much. This KTM is different. I purchased it for a practical reason. It effectively cuts my commute to about 50 minutes per day (from about 2 hours if taking public transport). It&rsquo;s cheap to buy and own, light (&lt;150kg), sufficiently powerful, maneuverable and subjectively aesthetically pleasing.</p>

<p><a href="https://www.flickr.com/photos/tentaclephotos/34074232195"><img src="https://c2.staticflickr.com/4/3927/34074232195_7e8d699d84_c.jpg" width="800"></a></p>

<p>What does it actually mean to connect a motorbike to the Internet? I defined it as tapping into the data that the bike&rsquo;s engine provides, such as RPMs and how much throttle is currently given by the rider (1-100%), and sending that data to online services. The data could be used to analyze bike performance on a race circuit so that the engine could be later tuned. Since the major intent with the project was learning I also wanted to try out a couple of Amazon services, such as <a href="https://aws.amazon.com/iot-platform/how-it-works/">Amazon IoT</a> and serverless <a href="https://aws.amazon.com/lambda/">Lambda functions</a>.</p>

<p>In addition to the appreciation for the bike itself I knew my bike had a micro USB port hidden under the seat and that a glorious Raspberry Pi 3 was among the available hardware for the hackathon. These two facts seemed to match perfectly. The existence of the USB interface instilled confidence that the project was feasible. I don&rsquo;t think I would hook into an engine ECU otherwise. It would be a bigger hardware challenge. And I don&rsquo;t even have a garage to work in!</p>

<p>I limited the scope to RPMs and throttle values only. I also didn&rsquo;t want to spend time writing server side code and setting up web services and infrastructure even though that&rsquo;s not terribly difficult. The point of the project was not to exercise skills building CRUD applications and configuring standard services like message queues. I get enough of that during my day job. Instead, I chose to combine a couple of serverless Amazon services to hack something together. The cost was also important. I used a free tier and wanted to spend exactly 0$ on this.</p>

<h2>Hardware</h2>

<p>I was mostly guided by what&rsquo;s available. We had a bunch of Raspberry Pi 3 boards available. That was a nobrainer. These are staples of DIYers and makers. Raspberry Pi 3 needs no introduction. It&rsquo;s just a small x86 computer. It can do anything a regular computer can do. Hence, the entry barrier is nonexistent. I have set it up in 20 minutes.</p>

<p><a href="/images/raspberrypi3.jpg"><img src="/images/raspberrypi3.jpg" width="500"></a></p>

<p>After the setup I had a complete Linux computer available to me, complete with SSH, Linux kernel (and, by extension, its wide device support) and standard environment. I also didn&rsquo;t need to learn a new programming language &mdash; I could program in virtually any language I wanted.</p>

<p>Raspberry Pi 3 can be powered from a USB port. As an owner of a 10,000mah USB energy bank I couldn&rsquo;t be happier. That meant the Raspberry Pi 3 is essentially a battery powered device!</p>

<p><a href="/images/powerbank.jpg"><img src="/images/powerbank.jpg" width="500"></a></p>

<p>The other hardware component is more unusual. As I mentioned above, my bike has a mini USB port. But not every motorcycle has one. Last year I had installed a device from Dynojet called Power Commander 5 (PCV, for short). It is a third-party module that intercepts communication on the ECU and makes adjustments according to a predefined configuration. Typically PCV is used for performance reasons. I personally installed it to improve engine smoothness over low RPMs (during commutes). PCV is available for many bike models. The microprocessor is the same but the wiring harnesses that tap into ECUs differ for each bike model.</p>

<p><a href="/images/pcv.png"><img src="/images/pcv.png" width="500"></a></p>

<p>The PCV is a proprietary closed-source device. It is equipped with a micro USB port and communicates with a piece of software for Windows that lets users upload custom engine configurations and fine-tune parameters. Apart from the genuinely useful features, the software also shows real-time figures, like the RPMs and throttle values that I was after. Since the Windows tool can somehow read data from the PCV I correctly assumed it must be possible to somehow extract the data on Linux.</p>

<p>Because PCV is a proprietary device there is no developer documentation or anything such as a public APIs available. That meant that I had to reverse engineer the protocol and understand how it works. There was absolutely zero information about it on the Internet. Apparently, nobody was really interested in it. Can&rsquo;t say I&rsquo;m surprised &mdash; there are many other useful things to do. In any case, the reverse engineering aspect of the project was the largest risk. I wasn&rsquo;t sure at all. The device could have had some kind of obfuscation or even packet encryption. I was also lucky along the way. I cover the reverse engineering process in part 2. All in all, reverse engineering took about 80% of the whole project time.</p>

<h2>Software architecture and constraints</h2>

<p>The project being a hackathon the biggest constraint was time or the lack of it. I had 4 days to complete the project but I also had to take care of an occasional issue in our live system. Due to ongoing commitments I limited my engagement to regular working hours. For that reason I chose not to spend much time on familiar but time-consuming aspects, such as backend development. I didn&rsquo;t design the system to be efficient or scalable or useful. In fact, the choice of the server-side system was in the end not that great. I also settled on a familiar programming environment, namely Java.</p>

<p>Java is installed by default in Raspbian, the Linux flavor Raspberry Pi 3 comes with it. I had to install JDK 8, though. Raspbian comes with version 7. I verified that Java has a good library for USB communication (<a href="http://usb4java.org/quickstart/javax-usb.html">usb4java</a>) and that I could easily interact with Amazon IoT. I carried out most of the development and debugging on an OSX host with IntelliJ IDEA. I couldn&rsquo;t get OSX to work with the PCV device without getting into low level OSX programming so in the later phases I mostly ran code from the Raspberry Pi.</p>

<p><a href="https://www.flickr.com/photos/tentaclephotos/33236540854"><img src="https://c1.staticflickr.com/3/2885/33236540854_4a43119fe8_z.jpg" width="800"></a></p>

<p>The architecture of the system is very simple. The client program connects to the PCV device and to the Internet. It then streams data in real-time to the Amazon Web Services (to be explained in part 3). The only constraint was that the tool should be resilient to Internet and PCV device disconnects. The server side should accept the stream of data from the client, persist it and visualize it. Connectivity to the Internet would be provided by an Android phone through a hotspot feature.</p>

<h2>Challenges and future prospects</h2>

<p>I completed the project. As I stood outside and listened to the roar of the engine, the Raspberry Pi 3 communicated with the PCV and streamed the data through MQTT protocol to Amazon IoT. Some magic trickery (not really) in Amazon services then transformed the messages into metrics that were exposed through the AWS management console. It worked!</p>

<p><a href="https://www.flickr.com/photos/tentaclephotos/33267251433"><img src="https://c1.staticflickr.com/3/2938/33267251433_1f180b5215_c.jpg" width="800"></a></p>

<p>I have spent most of the project time on reverse engineering. And I liked it. It was a like a rewarding puzzle. I almost gave up several times but miraculously got enough breakthroughs to persevere. I imagine that my progress in reverse engineering Power Commander 5 interface is potentially the most reusable part of the project so please help yourself and do something with it if you want &mdash; <a href="https://github.com/pisarenko-net/pcv-streamer">the code is published on github</a>. I will share how I analyzed the PCV devices and learned its wire protocol in the next part.</p>

<p>The final result is crude but it&rsquo;s a 0.0.1 version. I imagine this could be used to write a complete Linux software for the PCV device. An even more ambitious goal is to make a cloud-based system that uploads engine configurations on the fly and tunes parameters on the go. <a href="https://www.wired.com/2015/07/hackers-remotely-kill-jeep-highway/">I&rsquo;m not sure I&rsquo;d like that on my bike though&hellip;</a></p>

<p>&hellip;to be continued with the juicy reverse engineering bits (pun intended) <a href="/blog/2017/04/17/internet-connected-motorcycle-project-part-2/">in part 2</a>.</p>
]]></content>
  </entry>
  
</feed>
